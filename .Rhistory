install.packages('devtools')
install.packages('TMB')
library(TMB)
runExample(all=TRUE)
library(TMB)
runExample(all=TRUE)
install.packages('devtools')
install.packages('devtools')
devtools::install_github("DTUAqua/DATRAS/DATRAS")
log(-1)
38300/148
library(VAST)
### !! THIS IS NOT REAL DATA !! ###
data(acoustic_and_trawl, package = "FishStatsUtils" )
dat <- subset(acoustic_and_trawl, Year<2012)
str(dat)       # note Gear reflects different data sets
## Make default settings for index standardization
settings <- make_settings(
n_x = 100,
Region = "eastern_bering_sea",
purpose = "index2",
bias.correct = FALSE,
fine_scale = TRUE)
## settings$Options$treat_nonencounter_as_zero <- FALSE
settings$FieldConfig[2,2] <- 0 # turn off spatiotemporal LP2
### Setup the "combined" part of the model
## Associate depth strata (0 = <0.5m, 1 = 0.5-16m, 2 = >16m) with each
## observation (row). This is two columns b/c there are
## observations from at most 2 strata.
c_iz <- matrix( c(1,2, 2,NA, 3,NA),
byrow = TRUE,
nrow = 3,
ncol = 2)[as.numeric(dat$Gear)] - 1
c_
c_iz
length(c_iz)
length(dat$Catch_KG)
library(reldist)
edit(wtd.quantile)
Hmisc::wtd.quantile()
edit(Hmisc::wtd.quantile())
edit(Hmisc::wtd.quantile)
902+111+198
198/902+111
198/(902+111)
198/1211
mean(c(1.19,1.54))
1.05
1.03
0.74
mean(c(1.05, 1.03,.74))
26310-2000+600-100+4654
53502-29464
3639.4349	/25476.0486
12738.0243	/25476.0486
3344.9656	/12136.8162
12136.8162	/25476.0486
800/25
25*32
18+15+15
80*900
20*25
6*20
25*4
25*4*4
2200*1100
22*1100
200000/45
1300*7.5
45*25
setwd("~/Github/BOFFsims/R")
setwd("~/Github/BOFFsims/")
### Run bulk sims ###
require('scam')
require('tidyverse')
require('patchwork')
source('R/fn_sims.R')
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
source('R/est_eggs.R')
source('R/plotRecruitment.R')
source('R/getEquilibrium.R')
source('R/runScenarios.R')
eggs <- read.csv('data/fecundityEggSizeFemaleSize.csv')
eggs$weight <- 0.01*(eggs$FemaleSize_mm/10)^3 # Fix this later
# All eggs as a function of size
eggs <- eggs %>% group_by(Species) %>%
mutate(relweight = weight/max(weight),
releggs = Fecundity_nOfEggs_per_female/max(Fecundity_nOfEggs_per_female)
)
x <- eggs[is.na(eggs$relweight) == 0,]$relweight
y <- eggs[is.na(eggs$relweight) == 0,]$releggs
# all relative eggs
#parms <- est_eggs(x,y)
# Just take the cod eggs most of the other fish are not really big fisheries
cod <- eggs[eggs$Species == 'Gadus morhua',]
cod$weight <- 0.01*(cod$FemaleSize_mm/10)^3 # Fix the parameters for weight lenght to whatever here
codest <- est_eggs(x = cod$weight,
y = cod$Fecundity_nOfEggs_per_female)
# Life history
Linf <- 50
K <-  0.4
SDR <- 0.
rho <- c(.01,.1, .5, .7, .9) # Try five different auto correlation coefficients
#rho <- rep(.5, 5)
maxage <- 10
tau <- 3
M0 <- .4
tau_sel <- 2
egg.scale <- 1e5
R0 = 1000
recruitment = 'BH_steep'
recruitment.type <- 'AR'
fishing.type <- 'constant'
nspecies <- 1
mortality <- 'constant'
F0 <- seq(0.1,1, length.out = 5)
# Calculate Fmsy as a function of LH parameters
Fmsy <- seq(0,2, length.out = 50)
Catch <- data.frame(
F0 = rep(Fmsy, nspecies),
species = rep(Linf, each = length(Fmsy)*nspecies),
Catch = NA
)
for(i in 1:nspecies){
for(j in 1:length(Fmsy)){
df <- load_data_seasons(nseason = 1,
nyear = 100,# Set up parameters
Linf = Linf[i],
maxage = maxage[i],
tau = tau[i],
K = K[i],
t0 = 0,
tau_sel = tau_sel[i],
M= M0[i],
SDR = 0, # Recruitment deviations - set to zero to calculate lambda
fishing.type = 'constant',
mortality = 'constant',
recruitment = recruitment,
negg = codest$parameters[['alpha.lin']]/egg.scale[i],
eggbeta = codest$parameters[['beta.lin']],
F0 = Fmsy[j], # Set to zero to calc lambda
R0 = R0) # Specify parameters
tmp <- run.agebased.true.catch(df)
Catch[Catch$species == Linf[i] & Catch$F0 == Fmsy[j],]$Catch <- tmp$Catch[df$tEnd]
}
}
ggplot(Catch, aes(x = F0, y = Catch, color = as.factor(species)))+geom_line()+theme_classic()+
facet_wrap(~species, scales = 'free_y')+theme(legend.position = 'none')
F0 <- seq(0.1,1, length.out = 5)
years <- 100
t0 <- 0
models = c('linear')
recLambda = c('noBOFF','BOFF')
recruitment <- 'BH_steep'
mortality = 'constant'
fishing.type = 'AR'
recruitment.type = 'AR'
nruns <- 100
rho <- c(.5)#, 0.3, 0.5, .9)
set.seed(123)
lambda.in <- c(1.5)
lambda.cut <- .9
M <- 0.2
F0 <- seq(0,.8, length.out = 20)
ls.plot <- runScenarios(models = models,
recLambda = recLambda,
nruns = nruns,
years = years,
Fpast = Fpast,
runLambda = FALSE,
lambda.in = lambda.in,
rho = rho,
egg.df = codest,
egg.scale = egg.scale,
lambda.cut = lambda.cut,
SDR = .5,
SDF = 0,
F0 = F0,
maxage = maxage,
K = K,
Linf = Linf,
t0 = t0,
tau = tau,
tau_sel = tau_sel,
M = M,
mortality = mortality,
fishing.type = fishing.type,
recruitment.type = recruitment.type
)
#
ggplot(ls.plot$df.save[ls.plot$df.save$years > 20,], aes(x = F0,y = xfrac,
color = model))+geom_point(alpha =.1)+geom_smooth()
ggplot(ls.plot$df.save[ls.plot$df.save$years > 20,], aes(x = xfrac,y = R,
color = model))+geom_point(alpha =.1)+geom_smooth()+
theme_classic()
# Calculate fraction young and old based on mikaels calcs
df.N <- ls.plot$df.N[ls.plot$df.N$age > 0,]
df.sum <- ls.plot$df.sum
df.N$old <- 'young'
df.N$old[df.N$age >= (df$tau+2)] <- 'old'
xx <- df.N %>% group_by(years, F0, rho, lambda, model, old, run ) %>% summarise(SSB = sum(N*weight*mat),
Rdev = mean(Rdev))
# Exclude recruits from all calculations
xx.tot <- df.N %>% group_by(years, F0, rho, lambda, model, run ) %>%
summarise(SSB = sum(N*weight*mat),
Rdev = mean(Rdev),
mage = weighted.mean(age, N*mat),
mweight = weighted.mean(weight, N*mat))
xxOld <- xx[xx$old == 'old',]
xxYoung <- xx[xx$old == 'young',]
# Sort the
fracOld <- data.frame(oldFrac = xxOld$SSB/(xxOld$SSB+xxYoung$SSB),
F0 = xxOld$F0,
years = xxOld$years,
lambda = xxOld$lambda,
rho = xxOld$rho,
Rdev = xxOld$Rdev,
mSSBage  = xx.tot$mage,
mSSBweight = xx.tot$mweight,
model = xxOld$model,
run = xxOld$run)
## Make a correlation data frame for Mikael ##
df.cor <- fracOld[fracOld$years > 5,]  %>% group_by(F0, lambda, rho, run, model) %>%
mutate(Rdev_frac = cor(oldFrac, Rdev),
Rdev_mage = cor(oldFrac, mSSBage),
Rdev_mweight = cor(oldFrac, mSSBweight)
) #%>%  select(years, F0, lambda, rho, Rdev_frac, mage_frac, mweight_frac, run)
fracOld$F0 <- round(fracOld$F0, digits = 2)
p1 <- ggplot(fracOld[fracOld$run == 1 & fracOld$years > 20,], aes(x = years, y = oldFrac, group = model, color = factor(F0)))+
geom_line()+facet_wrap(~F0)+
geom_hline(aes(yintercept = mean(fracOld$oldFrac)), linetype = 2)+
theme(legend.position = 'none')+theme_classic()+theme(legend.position = 'none')+
scale_y_continuous('fraction of old spawners')
p2 <- ggplot(fracOld[fracOld$run == 1 & fracOld$years > 20,], aes(x = F0, y = oldFrac, group = model, color = factor(F0)))+
geom_point()+facet_wrap(~model)+
geom_hline(aes(yintercept = mean(fracOld$oldFrac)), linetype = 2)+
theme(legend.position = 'none')+theme_classic()+theme(legend.position = 'none')+
scale_y_continuous('')
p1+p2
ggsave('figures/F0_impact_onspawner.png', p1+p2, width = 16, height = 12, units = 'cm')
# Plot the correlation plots #
df.cor.plot <- df.cor %>% pivot_longer(c(Rdev_frac, Rdev_mage, Rdev_mweight))
dodge <- position_dodge(.5)
ggplot(df.cor.plot, aes(x = name, y = value, color = model))+geom_violin(position = dodge)+
geom_boxplot(width = .2,position = dodge)+theme_bw()
p3 <- ggplot(df.cor, aes(x = oldFrac, y = Rdev))+geom_point()+geom_smooth()
p4 <- ggplot(df.cor, aes(x = oldFrac, y = mSSBage))+geom_point()+geom_smooth()
p5 <- ggplot(df.cor, aes(x = oldFrac, y = mSSBweight))+geom_point()+geom_smooth()
p3 + p4 + p5
ggsave('figures/cors.png', p3+p4+p5, width = 16, height = 12, units = 'cm')
p5 <- ggplot(df.cor, aes(x = oldFrac, y = Rdev))+geom_point()+geom_smooth()
p6 <- ggplot(df.cor, aes(x = mSSBage, y = Rdev))+geom_point()+geom_smooth()
p7 <- ggplot(df.cor, aes(x = mSSBweight, y = Rdev))+geom_point()+geom_smooth()
p5 + p6 + p7
ggsave('figures/rdev_calcs.png', p3+p4+p5, width = 16, height = 12, units = 'cm')
df.cor <- fracOld[fracOld$years > 20,]  %>% group_by(F0, lambda, rho, run, model) %>%
mutate(Rdev_frac = cor(oldFrac, Rdev),
Rdev_mage = cor(oldFrac, mSSBage),
Rdev_mweight = cor(oldFrac, mSSBweight)
) #%>%  select(years, F0, lambda, rho, Rdev_frac, mage_frac, mweight_frac, run)
fracOld$F0 <- round(fracOld$F0, digits = 2)
p1 <- ggplot(fracOld[fracOld$run == 1 & fracOld$years > 20,], aes(x = years, y = oldFrac, group = model, color = factor(F0)))+
geom_line()+facet_wrap(~F0)+
geom_hline(aes(yintercept = mean(fracOld$oldFrac)), linetype = 2)+
theme(legend.position = 'none')+theme_classic()+theme(legend.position = 'none')+
scale_y_continuous('fraction of old spawners')
p2 <- ggplot(fracOld[fracOld$run == 1 & fracOld$years > 20,], aes(x = F0, y = oldFrac, group = model, color = factor(F0)))+
geom_point()+facet_wrap(~model)+
geom_hline(aes(yintercept = mean(fracOld$oldFrac)), linetype = 2)+
theme(legend.position = 'none')+theme_classic()+theme(legend.position = 'none')+
scale_y_continuous('')
p1+p2
ggsave('figures/F0_impact_onspawner.png', p1+p2, width = 16, height = 12, units = 'cm')
# Plot the correlation plots #
df.cor.plot <- df.cor %>% pivot_longer(c(Rdev_frac, Rdev_mage, Rdev_mweight))
dodge <- position_dodge(.5)
ggplot(df.cor.plot, aes(x = name, y = value, color = model))+geom_violin(position = dodge)+
geom_boxplot(width = .2,position = dodge)+theme_bw()
p3 <- ggplot(df.cor, aes(x = oldFrac, y = Rdev))+geom_point()+geom_smooth()
p4 <- ggplot(df.cor, aes(x = oldFrac, y = mSSBage))+geom_point()+geom_smooth()
p5 <- ggplot(df.cor, aes(x = oldFrac, y = mSSBweight))+geom_point()+geom_smooth()
p3 + p4 + p5
ggsave('figures/cors.png', p3+p4+p5, width = 16, height = 12, units = 'cm')
p5 <- ggplot(df.cor, aes(x = oldFrac, y = Rdev))+geom_point()+geom_smooth()
p6 <- ggplot(df.cor, aes(x = mSSBage, y = Rdev))+geom_point()+geom_smooth()
p7 <- ggplot(df.cor, aes(x = mSSBweight, y = Rdev))+geom_point()+geom_smooth()
p5 + p6 + p7
nruns <- 1000
rho <- c(.5)#, 0.3, 0.5, .9)
set.seed(123)
lambda.in <- c(1.5)
lambda.cut <- .9
M <- 0.2
F0 <- seq(0,.8, length.out = 20)
ls.plot <- runScenarios(models = models,
recLambda = recLambda,
nruns = nruns,
years = years,
Fpast = Fpast,
runLambda = FALSE,
lambda.in = lambda.in,
rho = rho,
egg.df = codest,
egg.scale = egg.scale,
lambda.cut = lambda.cut,
SDR = .5,
SDF = 0,
F0 = F0,
maxage = maxage,
K = K,
Linf = Linf,
t0 = t0,
tau = tau,
tau_sel = tau_sel,
M = M,
mortality = mortality,
fishing.type = fishing.type,
recruitment.type = recruitment.type
)
#
ggplot(ls.plot$df.save[ls.plot$df.save$years > 20,], aes(x = F0,y = xfrac,
color = model))+geom_point(alpha =.1)+geom_smooth()
