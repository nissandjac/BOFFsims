geom_smooth(data = df.new %>% filter(years %in% 2016:2021), method = 'lm', se = FALSE , formula=y~1, color = 'red', linetype = 1, alpha = 0.8)+
facet_wrap(~stock, scales = 'free_y', ncol = 4)+
#geom_line(aes(y = rMean_RSSB), col = 'red')+
theme_bw()+#scale_x_continuous(labels = c(1970, 1990, 2010))+
theme(legend.position = 'none', axis.text.x = element_text(angle = 60, vjust = 1, hjust=1)) +
scale_y_continuous('R/SSB')+
geom_hline(data=df.new.quant2, aes(yintercept = Smid))+
geom_hline(data=df.new.quant2, aes(yintercept = Smin), linetype = 2)+
geom_hline(data=df.new.quant2, aes(yintercept = Shigh), linetype = 2)
p1
df.new.quant2 <- df.new %>% group_by(stock) %>% summarise(
Smid = mean(R_SSB, na.rm =TRUE),
n = length(R_SSB),
Smin = Smid - (1.645*sqrt(sum((R_SSB-Smid)^2, na.rm =TRUE)/(length(R_SSB)-6))),
Shigh =Smid + (1.645*sqrt(sum((R_SSB-Smid)^2, na.rm =TRUE)/(length(R_SSB)-6))),
years = NA
)
df.ref <- df.new %>% filter(years > 2016, years <  2022) %>% group_by(stock) %>%
summarise(SSBr_med = mean(R_SSB, na.rm =TRUE),
SSBr_min = quantile(R_SSB, probs = 0.1, na.rm =TRUE),
SSBr_max = quantile(R_SSB, probs = 0.9, na.rm =TRUE)
)
p1 <- ggplot(df.new, aes(x = years,  y = R_SSB))+geom_line()+
#geom_smooth(method = 'lm', se = FALSE , formula=y~1, color = 'black', linetype = 1)+
geom_smooth(data = df.new %>% filter(years %in% 2016:2021), method = 'lm', se = FALSE , formula=y~1, color = 'red', linetype = 1, alpha = 0.8)+
facet_wrap(~stock, scales = 'free_y', ncol = 4)+
#geom_line(aes(y = rMean_RSSB), col = 'red')+
theme_bw()+#scale_x_continuous(labels = c(1970, 1990, 2010))+
theme(legend.position = 'none', axis.text.x = element_text(angle = 60, vjust = 1, hjust=1)) +
scale_y_continuous('R/SSB')+
geom_hline(data=df.new.quant2, aes(yintercept = Smid))+
geom_hline(data=df.new.quant2, aes(yintercept = Smin), linetype = 2)+
geom_hline(data=df.new.quant2, aes(yintercept = Shigh), linetype = 2)
p1
df.new.quant2 <- df.new %>% group_by(stock) %>% summarise(
Smid = mean(R_SSB, na.rm =TRUE),
n = length(R_SSB),
Smin = Smid - sqrt(sum((R_SSB-Smid)^2, na.rm =TRUE)/(n-6)),
Shigh =Smid + sqrt(sum((R_SSB-Smid)^2, na.rm =TRUE)/(n-6)),
years = NA
)
df.ref <- df.new %>% filter(years > 2016, years <  2022) %>% group_by(stock) %>%
summarise(SSBr_med = mean(R_SSB, na.rm =TRUE),
SSBr_min = quantile(R_SSB, probs = 0.1, na.rm =TRUE),
SSBr_max = quantile(R_SSB, probs = 0.9, na.rm =TRUE)
)
p1 <- ggplot(df.new, aes(x = years,  y = R_SSB))+geom_line()+
#geom_smooth(method = 'lm', se = FALSE , formula=y~1, color = 'black', linetype = 1)+
geom_smooth(data = df.new %>% filter(years %in% 2016:2021), method = 'lm', se = FALSE , formula=y~1, color = 'red', linetype = 1, alpha = 0.8)+
facet_wrap(~stock, scales = 'free_y', ncol = 4)+
#geom_line(aes(y = rMean_RSSB), col = 'red')+
theme_bw()+#scale_x_continuous(labels = c(1970, 1990, 2010))+
theme(legend.position = 'none', axis.text.x = element_text(angle = 60, vjust = 1, hjust=1)) +
scale_y_continuous('R/SSB')+
geom_hline(data=df.new.quant2, aes(yintercept = Smid))+
geom_hline(data=df.new.quant2, aes(yintercept = Smin), linetype = 2)+
geom_hline(data=df.new.quant2, aes(yintercept = Shigh), linetype = 2)
p1
min(df.ref$SSBr_min)
df.new.quant2 <- df.new %>% group_by(stock) %>% summarise(
Smid = exp(mean(log(R_SSB), na.rm =TRUE)),
n = length(R_SSB),
Smin = exp(log(Smid) - sqrt(sum((log(R_SSB)-log(Smid))^2, na.rm =TRUE)/(n-6))),
Shigh =exp(log(Smid) + sqrt(sum((log(R_SSB)-log(Smid))^2, na.rm =TRUE)/(n-6))),
years = NA
)
df.ref <- df.new %>% filter(years > 2016, years <  2022) %>% group_by(stock) %>%
summarise(SSBr_med = mean(R_SSB, na.rm =TRUE),
SSBr_min = quantile(R_SSB, probs = 0.1, na.rm =TRUE),
SSBr_max = quantile(R_SSB, probs = 0.9, na.rm =TRUE)
)
p1 <- ggplot(df.new, aes(x = years,  y = R_SSB))+geom_line()+
#geom_smooth(method = 'lm', se = FALSE , formula=y~1, color = 'black', linetype = 1)+
geom_smooth(data = df.new %>% filter(years %in% 2016:2021), method = 'lm', se = FALSE , formula=y~1, color = 'red', linetype = 1, alpha = 0.8)+
facet_wrap(~stock, scales = 'free_y', ncol = 4)+
#geom_line(aes(y = rMean_RSSB), col = 'red')+
theme_bw()+#scale_x_continuous(labels = c(1970, 1990, 2010))+
theme(legend.position = 'none', axis.text.x = element_text(angle = 60, vjust = 1, hjust=1)) +
scale_y_continuous('R/SSB')+
geom_hline(data=df.new.quant2, aes(yintercept = Smid))+
geom_hline(data=df.new.quant2, aes(yintercept = Smin), linetype = 2)+
geom_hline(data=df.new.quant2, aes(yintercept = Shigh), linetype = 2)
p1
df.new.quant2 <- df.new %>% group_by(stock) %>% summarise(
Smid = exp(mean(log(R_SSB), na.rm =TRUE)),
n = length(R_SSB),
Smin = exp(log(Smid) - 1.6*sqrt(sum((log(R_SSB)-log(Smid))^2, na.rm =TRUE)/(n-6))),
Shigh =exp(log(Smid) + 1.6*sqrt(sum((log(R_SSB)-log(Smid))^2, na.rm =TRUE)/(n-6))),
years = NA
)
df.ref <- df.new %>% filter(years > 2016, years <  2022) %>% group_by(stock) %>%
summarise(SSBr_med = mean(R_SSB, na.rm =TRUE),
SSBr_min = quantile(R_SSB, probs = 0.1, na.rm =TRUE),
SSBr_max = quantile(R_SSB, probs = 0.9, na.rm =TRUE)
)
p1 <- ggplot(df.new, aes(x = years,  y = R_SSB))+geom_line()+
#geom_smooth(method = 'lm', se = FALSE , formula=y~1, color = 'black', linetype = 1)+
geom_smooth(data = df.new %>% filter(years %in% 2016:2021), method = 'lm', se = FALSE , formula=y~1, color = 'red', linetype = 1, alpha = 0.8)+
facet_wrap(~stock, scales = 'free_y', ncol = 4)+
#geom_line(aes(y = rMean_RSSB), col = 'red')+
theme_bw()+#scale_x_continuous(labels = c(1970, 1990, 2010))+
theme(legend.position = 'none', axis.text.x = element_text(angle = 60, vjust = 1, hjust=1)) +
scale_y_continuous('R/SSB')+
geom_hline(data=df.new.quant2, aes(yintercept = Smid))+
geom_hline(data=df.new.quant2, aes(yintercept = Smin), linetype = 2)+
geom_hline(data=df.new.quant2, aes(yintercept = Shigh), linetype = 2)
p1
hist(df.new$R_SSB)
hist(log(df.new$R_SSB))
nruns <- 10
seeds <- round(runif(nruns, 1, 1e6 ))
for(n in 1:nruns){
if(n == 1){
start_time <- Sys.time()
}
for(i in 1:nspecies){
Fmsy <- seq(0,M0[i]*2, length.out = 50)
for(j in 1:length(Fmsy)){
df <- load_data_seasons(nseason = 1,
nyear = 50,# Set up parameters
Linf = Linf[i],
maxage = maxage[i],
tau = tau[i],
K = K[i],
h = h[i],
t0 = 0,
tau_sel = tau_sel[i],
M= M0[i],
SDR = SDR[i], # Recruitment deviations - set to zero to calculate lambda
fishing.type = 'constant',
mortality = 'constant',
recruitment = recruitment,
negg = codest$parameters[['alpha.lin']],
eggbeta = codest$parameters[['beta.lin']],
F0 = Fmsy[j], # Set to zero to calc lambda
R0 = R0[i],
seed = seeds[n]) # Specify parameters
if(n == 1){
R0[i] <- getR0(init = 10000, df)
df$parms$logRinit <- log(R0[i])
}
tmp <- run.agebased.true.catch(df)
if(i == 1 & j == 1 & n == 1){
df.iso <- data.frame(yr = df$years, species = Linf[i], SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j],
C = tmp$Catch, R = tmp$R.save, n = n)
}else{
df.iso <- rbind(df.iso,
data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j],
C = tmp$Catch, R = tmp$R.save, n = n))
}
}
}
for(i in 1:nspecies){
Fmsy <- seq(0,M0[i]*2, length.out = 50)
for(j in 1:length(Fmsy)){
df <- load_data_seasons(nseason = 1,
nyear = 50,# Set up parameters
Linf = Linf[i],
maxage = maxage[i],
tau = tau[i],
K = K[i],
h = h[i],
t0 = 0,
tau_sel = tau_sel[i],
M= M0[i],
SDR = SDR[i], # Recruitment deviations - set to zero to calculate lambda
fishing.type = 'constant',
mortality = 'constant',
recruitment = recruitment,
negg = codest$parameters[['alpha.hyper']],
eggbeta = codest$parameters[['beta.hyper']],
F0 = Fmsy[j], # Set to zero to calc lambda
R0 = R0[i],
seed = seeds[n]) # Specify parameters
if(n == 1){
R0[i] <- getR0(init = 10000, df)
df$parms$logRinit <- log(R0[i])
}
tmp <- run.agebased.true.catch(df)
if(i == 1 & j == 1 & n == 1){
df.hyp <- data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j], C = tmp$Catch, R = tmp$R.save, n = n)
}else{
df.hyp <- rbind(df.hyp,
data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j], C = tmp$Catch,R = tmp$R.save, n = n))
}
}
}
if(n == nruns){
end_time <- Sys.time()
print(end_time - start_time)
}
}
### Run bulk sims ###
require('scam')
require('tidyverse')
require('patchwork')
source('R/fn_sims.R')
setwd("~/Github/BOFFsims/R_scripts")
### Run bulk sims ###
require('scam')
require('tidyverse')
require('patchwork')
source('R/fn_sims.R')
setwd("~/Github/BOFFsims/R_scripts")
setwd("~/Github/BOFFsims/")
require('scam')
require('tidyverse')
require('patchwork')
source('R/fn_sims.R')
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
source('R/est_eggs.R')
source('R/plotRecruitment.R')
source('R/getEquilibrium.R')
source('R/runScenarios.R')
eggs <- read.csv('data/fecundityEggSizeFemaleSize.csv')
eggs$weight <- 0.01*(eggs$FemaleSize_mm/10)^3 # Fix this later
# All eggs as a function of size
eggs <- eggs %>% group_by(Species) %>%
mutate(relweight = weight/max(weight),
releggs = Fecundity_nOfEggs_per_female/max(Fecundity_nOfEggs_per_female)
)
x <- eggs[is.na(eggs$relweight) == 0,]$relweight
y <- eggs[is.na(eggs$relweight) == 0,]$releggs
# all relative eggs
#parms <- est_eggs(x,y)
# Just take the cod eggs most of the other fish are not really big fisheries
cod <- eggs[eggs$Species == 'Gadus morhua',]
cod$weight <- 0.01*(cod$FemaleSize_mm/10)^3 # Fix the parameters for weight lenght to whatever here
codest <- est_eggs(x = cod$weight,
y = cod$Fecundity_nOfEggs_per_female)
cod.df <- codest$df
p1 <- ggplot(cod.df %>% filter(model != 'data'), aes(x = weight, y = estimate, color = model))+geom_line()+
geom_point(data=cod.df %>% filter(model == 'data'), alpha = .5)+scale_y_continuous('Fecundity')+
scale_x_continuous('weight (g)')+theme_classic()
p1
# Do it for sardine as well
sard <- eggs %>% filter(Species =="Engraulis mordax")
sard$weight <- 0.01*(sard$FemaleSize_mm/10)^3 # Fix the parameters for weight lenght to whatever here
sardest <- est_eggs(x = sard$weight,
y = sard$Fecundity_nOfEggs_per_female)
sard.df <- sardest$df
p2 <- ggplot(sard.df %>% filter(model != 'data'), aes(x = weight, y = estimate, color = model))+geom_line()+
geom_point(data=sard.df %>% filter(model == 'data'), alpha = .5)+scale_y_continuous('Fecundity')+
scale_x_continuous('weight (g)')+theme_classic()
p2
# Plot them together
pp.df <- rbind(cod.df %>% mutate(species = 'cod'), sard.df %>% mutate(species = 'sardine'))
p2 <- ggplot(pp.df %>% filter(model != 'data'), aes(x = weight, y = estimate, color = model))+geom_line()+
geom_point(data=pp.df %>% filter(model == 'data'), alpha = .5)+scale_y_continuous('Fecundity')+
facet_wrap(~species, scales = 'free', nrow = 1)+
scale_x_continuous('weight (g)')+theme_classic()+theme(legend.position = c(0.2,0.8), legend.title = element_blank())
p2
ggsave(p2, file = 'egg_production_hyper_iso.png', width = 16, height = 8, units = 'cm')
Linf <- c(30, 60, 150)
K <- c(.7, 0.4, .2)
SDR <- c(1, 0.5, .4)
rho <- c(.1, .5, .8)
maxage <- c(5, 10, 20)
tau <- c(1.5,4,5)
M0 <- c(0.5, .4, .2)
tau_sel <- c(.5, 3, 3)
h <- c(0.7, .5, .4)
#egg.scale <- c(5e4, 3e5, 8e5)
R0 = c(10000,10000,10000)#*codest$parameters[['alpha.lin']]
recruitment = 'BH_steep'
nspecies <- 3
nruns <- 10
seeds <- round(runif(nruns, 1, 1e6 ))
# Calculate Fmsy as a function of LH parameters
for(n in 1:nruns){
if(n == 1){
start_time <- Sys.time()
}
for(i in 1:nspecies){
Fmsy <- seq(0,M0[i]*2, length.out = 50)
for(j in 1:length(Fmsy)){
df <- load_data_seasons(nseason = 1,
nyear = 50,# Set up parameters
Linf = Linf[i],
maxage = maxage[i],
tau = tau[i],
K = K[i],
h = h[i],
t0 = 0,
tau_sel = tau_sel[i],
M= M0[i],
SDR = SDR[i], # Recruitment deviations - set to zero to calculate lambda
fishing.type = 'constant',
mortality = 'constant',
recruitment = recruitment,
negg = codest$parameters[['alpha.lin']],
eggbeta = codest$parameters[['beta.lin']],
F0 = Fmsy[j], # Set to zero to calc lambda
R0 = R0[i],
seed = seeds[n]) # Specify parameters
if(n == 1){
R0[i] <- getR0(init = 10000, df)
df$parms$logRinit <- log(R0[i])
}
tmp <- run.agebased.true.catch(df)
if(i == 1 & j == 1 & n == 1){
df.iso <- data.frame(yr = df$years, species = Linf[i], SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j],
C = tmp$Catch, R = tmp$R.save, n = n)
}else{
df.iso <- rbind(df.iso,
data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j],
C = tmp$Catch, R = tmp$R.save, n = n))
}
}
}
for(i in 1:nspecies){
Fmsy <- seq(0,M0[i]*2, length.out = 50)
for(j in 1:length(Fmsy)){
df <- load_data_seasons(nseason = 1,
nyear = 50,# Set up parameters
Linf = Linf[i],
maxage = maxage[i],
tau = tau[i],
K = K[i],
h = h[i],
t0 = 0,
tau_sel = tau_sel[i],
M= M0[i],
SDR = SDR[i], # Recruitment deviations - set to zero to calculate lambda
fishing.type = 'constant',
mortality = 'constant',
recruitment = recruitment,
negg = codest$parameters[['alpha.hyper']],
eggbeta = codest$parameters[['beta.hyper']],
F0 = Fmsy[j], # Set to zero to calc lambda
R0 = R0[i],
seed = seeds[n]) # Specify parameters
if(n == 1){
R0[i] <- getR0(init = 10000, df)
df$parms$logRinit <- log(R0[i])
}
tmp <- run.agebased.true.catch(df)
if(i == 1 & j == 1 & n == 1){
df.hyp <- data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j], C = tmp$Catch, R = tmp$R.save, n = n)
}else{
df.hyp <- rbind(df.hyp,
data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j], C = tmp$Catch,R = tmp$R.save, n = n))
}
}
}
if(n == nruns){
end_time <- Sys.time()
print(end_time - start_time)
}
}
source('R/getR0.R')
eggs <- read.csv('data/fecundityEggSizeFemaleSize.csv')
eggs$weight <- 0.01*(eggs$FemaleSize_mm/10)^3 # Fix this later
# All eggs as a function of size
eggs <- eggs %>% group_by(Species) %>%
mutate(relweight = weight/max(weight),
releggs = Fecundity_nOfEggs_per_female/max(Fecundity_nOfEggs_per_female)
)
x <- eggs[is.na(eggs$relweight) == 0,]$relweight
y <- eggs[is.na(eggs$relweight) == 0,]$releggs
# all relative eggs
#parms <- est_eggs(x,y)
# Just take the cod eggs most of the other fish are not really big fisheries
cod <- eggs[eggs$Species == 'Gadus morhua',]
cod$weight <- 0.01*(cod$FemaleSize_mm/10)^3 # Fix the parameters for weight lenght to whatever here
codest <- est_eggs(x = cod$weight,
y = cod$Fecundity_nOfEggs_per_female)
cod.df <- codest$df
p1 <- ggplot(cod.df %>% filter(model != 'data'), aes(x = weight, y = estimate, color = model))+geom_line()+
geom_point(data=cod.df %>% filter(model == 'data'), alpha = .5)+scale_y_continuous('Fecundity')+
scale_x_continuous('weight (g)')+theme_classic()
p1
# Do it for sardine as well
sard <- eggs %>% filter(Species =="Engraulis mordax")
sard$weight <- 0.01*(sard$FemaleSize_mm/10)^3 # Fix the parameters for weight lenght to whatever here
sardest <- est_eggs(x = sard$weight,
y = sard$Fecundity_nOfEggs_per_female)
sard.df <- sardest$df
p2 <- ggplot(sard.df %>% filter(model != 'data'), aes(x = weight, y = estimate, color = model))+geom_line()+
geom_point(data=sard.df %>% filter(model == 'data'), alpha = .5)+scale_y_continuous('Fecundity')+
scale_x_continuous('weight (g)')+theme_classic()
p2
# Plot them together
pp.df <- rbind(cod.df %>% mutate(species = 'cod'), sard.df %>% mutate(species = 'sardine'))
p2 <- ggplot(pp.df %>% filter(model != 'data'), aes(x = weight, y = estimate, color = model))+geom_line()+
geom_point(data=pp.df %>% filter(model == 'data'), alpha = .5)+scale_y_continuous('Fecundity')+
facet_wrap(~species, scales = 'free', nrow = 1)+
scale_x_continuous('weight (g)')+theme_classic()+theme(legend.position = c(0.2,0.8), legend.title = element_blank())
p2
ggsave(p2, file = 'egg_production_hyper_iso.png', width = 16, height = 8, units = 'cm')
Linf <- c(30, 60, 150)
K <- c(.7, 0.4, .2)
SDR <- c(1, 0.5, .4)
rho <- c(.1, .5, .8)
maxage <- c(5, 10, 20)
tau <- c(1.5,4,5)
M0 <- c(0.5, .4, .2)
tau_sel <- c(.5, 3, 3)
h <- c(0.7, .5, .4)
#egg.scale <- c(5e4, 3e5, 8e5)
R0 = c(10000,10000,10000)#*codest$parameters[['alpha.lin']]
recruitment = 'BH_steep'
nspecies <- 3
nruns <- 10
seeds <- round(runif(nruns, 1, 1e6 ))
# Calculate Fmsy as a function of LH parameters
for(n in 1:nruns){
if(n == 1){
start_time <- Sys.time()
}
for(i in 1:nspecies){
Fmsy <- seq(0,M0[i]*2, length.out = 50)
for(j in 1:length(Fmsy)){
df <- load_data_seasons(nseason = 1,
nyear = 50,# Set up parameters
Linf = Linf[i],
maxage = maxage[i],
tau = tau[i],
K = K[i],
h = h[i],
t0 = 0,
tau_sel = tau_sel[i],
M= M0[i],
SDR = SDR[i], # Recruitment deviations - set to zero to calculate lambda
fishing.type = 'constant',
mortality = 'constant',
recruitment = recruitment,
negg = codest$parameters[['alpha.lin']],
eggbeta = codest$parameters[['beta.lin']],
F0 = Fmsy[j], # Set to zero to calc lambda
R0 = R0[i],
seed = seeds[n]) # Specify parameters
if(n == 1){
R0[i] <- getR0(init = 10000, df)
df$parms$logRinit <- log(R0[i])
}
tmp <- run.agebased.true.catch(df)
if(i == 1 & j == 1 & n == 1){
df.iso <- data.frame(yr = df$years, species = Linf[i], SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j],
C = tmp$Catch, R = tmp$R.save, n = n)
}else{
df.iso <- rbind(df.iso,
data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j],
C = tmp$Catch, R = tmp$R.save, n = n))
}
}
}
for(i in 1:nspecies){
Fmsy <- seq(0,M0[i]*2, length.out = 50)
for(j in 1:length(Fmsy)){
df <- load_data_seasons(nseason = 1,
nyear = 50,# Set up parameters
Linf = Linf[i],
maxage = maxage[i],
tau = tau[i],
K = K[i],
h = h[i],
t0 = 0,
tau_sel = tau_sel[i],
M= M0[i],
SDR = SDR[i], # Recruitment deviations - set to zero to calculate lambda
fishing.type = 'constant',
mortality = 'constant',
recruitment = recruitment,
negg = codest$parameters[['alpha.hyper']],
eggbeta = codest$parameters[['beta.hyper']],
F0 = Fmsy[j], # Set to zero to calc lambda
R0 = R0[i],
seed = seeds[n]) # Specify parameters
if(n == 1){
R0[i] <- getR0(init = 10000, df)
df$parms$logRinit <- log(R0[i])
}
tmp <- run.agebased.true.catch(df)
if(i == 1 & j == 1 & n == 1){
df.hyp <- data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j], C = tmp$Catch, R = tmp$R.save, n = n)
}else{
df.hyp <- rbind(df.hyp,
data.frame(yr = df$years, species = Linf[i],
SSB = as.numeric(tmp$SSB),
F0 = Fmsy[j], C = tmp$Catch,R = tmp$R.save, n = n))
}
}
}
if(n == nruns){
end_time <- Sys.time()
print(end_time - start_time)
}
}
df.iso <- df.iso %>% mutate(model = 'isometric')
df.hyp <- df.hyp %>% mutate(model = 'hyperallometric')
