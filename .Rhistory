# Fix values that are 0 or NaN to NA
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))}
state_new[is.nan.data.frame(state_new)] <- NA
state_new$Biomass[state_new$Biomass == 0] = NA
state_new$SSB[state_new$SSB == 0] = NA
state <- state_new
# Sort the dataframe
state <- state[with(state, order(wInf)), ]
totBioidx <- which(is.na(state$Biomass) == 1)
state$SSBio <- state$SSB
state$totFlag <- as.numeric(is.na(state$SSBio))
state$SSBio[totBioidx] <- state$Biomass[totBioidx]
rmidx <- which(is.na(state$SSBio) == 0)
state$F0[which(is.na(state$F0) == 1)] <- state$Catch[which(is.na(state$F0) == 1)]/
state$SSBio[which(is.na(state$F0) == 1)]
state$wInf[3]<- 15000
source('baseparameters.R')
source('IterateSpectrum.R')
rm(param)
h <- 20
kappaPP <- 5e5
param <- baseparameters(state$wInf, kappa = 5e5, h = h) # Kappa estimated from LME
param$tEnd <- 80
S <- NA
param$F0 <- state$F0
param$fishing <- "Trawl"
ptm <- proc.time()
S <- IterateSpectrum(param,S)
proc.time()-ptm
plotSpectrum(param,S)
plotBiomasstime(param,S)
plotBiomass(param,S)
compareBiomass(param,S,state)
# Plot the results
# Make sure the Rp/Rmax isn't too high
# Calculate species specific values of maximum uptake (h)
h <- 3*state$k/(param$alpha*state$wInf^(-1/3))
h[is.na(h)] <- mean(h,na.rm=T)
cV <- 1/mean(h,na.rm=T)
# hNew
kappaNew <- 694348
5333/6.1
5333*6.1
23700*12
284400+11000*4
24/1200
install.packages('VAST')
install.packages("remotes")
remotes::install_github("James-Thorson/VAST")
install_github("nwfsc-assess/geostatistical_delta-GLMM")
library(devtools)
install_github("nwfsc-assess/geostatistical_delta-GLMM")
install_github("nwfsc-assess/geostatistical_delta-GLMM", force = true)
install_github("nwfsc-assess/geostatistical_delta-GLMM", force = TRUE)
28700*12+(11500*4)/2
remotes::install_github("tokami/mse)
remotes::install_github("tokami/mse)
remotes::install_github("tokami/mse")
0^1.6
library(reshape2)
library(gtools)
library(patchwork)
library(tidyverse)
library(TMB)
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
# Load the data frame with eggs
eggs <- read.csv('data/fecundityEggSizeFemaleSize.csv')
eggs$weight <- 0.01*(eggs$FemaleSize_mm/10)^3 # Fix this later
# All eggs as a function of size
ggplot(eggs, aes(x = weight, y = exp(lnFecundity), color = Species))+
geom_point()+theme_bw()+theme(legend.position = 'none')+
geom_smooth(method = 'lm')+
scale_x_log10()+
scale_y_log10()
#
unique(eggs$Species)
setwd("~/GitHub/BOFFsims/R_scripts")
setwd("~/GitHub/BOFFsims/")
tau = 5
Linf = 150
maxage = 10
K = 0.6
t0 = 0
SDR = 0.5
F0 = 0.2
R0 = 1000
M = 0.4
recruitment = 'BH_R'
lambda.slope = .7
mortality = 'constant'
fishing.type = 'constant'
recruitment = 'AR
# Just use cod for fun
eggs <- read.csv('data/fecundityEggSizeFemaleSize.csv')
# Just use cod for fun
eggs <- read.csv('data/fecundityEggSizeFemaleSize.csv')
eggs$weight <- 0.01*(eggs$FemaleSize_mm/10)^3 # Fix this later
eggs <- eggs %>% group_by(Species) %>% mutate(relweight = weight/max(weight),
releggs = Fecundity_nOfEggs_per_female/max(Fecundity_nOfEggs_per_female)
)
require('tidyverse')
eggs <- eggs %>% group_by(Species) %>% mutate(relweight = weight/max(weight),
releggs = Fecundity_nOfEggs_per_female/max(Fecundity_nOfEggs_per_female)
)
x <- eggs[is.na(eggs$relweight) == 0,]$relweight
y <- eggs[is.na(eggs$relweight) == 0,]$releggs
# all relative eggs
parms <- est_eggs(x,y)
require('tidyverse')
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
source('R/est_eggs.R')
source('R/plotRecruitment.R')
source('R/getEquilibrium.R')
source('R/runScenarios.R')
#
# Just use cod for fun
eggs <- read.csv('data/fecundityEggSizeFemaleSize.csv')
eggs$weight <- 0.01*(eggs$FemaleSize_mm/10)^3 # Fix this later
eggs <- eggs %>% group_by(Species) %>% mutate(relweight = weight/max(weight),
releggs = Fecundity_nOfEggs_per_female/max(Fecundity_nOfEggs_per_female)
)
x <- eggs[is.na(eggs$relweight) == 0,]$relweight
y <- eggs[is.na(eggs$relweight) == 0,]$releggs
# all relative eggs
parms <- est_eggs(x,y)
# Just take the cod eggs most of the other fish are not really big fisheries
cod <- eggs[eggs$Species == 'Gadus morhua',]
cod$weight <- 0.01*(cod$FemaleSize_mm/10)^3 # Fix the parameters for weight lenght to whatever here
codest <- est_eggs(x = cod$weight,
y = cod$Fecundity_nOfEggs_per_female)
# Just take the cod eggs most of the other fish are not really big fisheries
cod <- eggs[eggs$Species == 'Gadus morhua',]
cod$weight <- 0.01*(cod$FemaleSize_mm/10)^3 # Fix the parameters for weight lenght to whatever here
codest <- est_eggs(x = cod$weight,
y = cod$Fecundity_nOfEggs_per_female)
# This df is just used for later calcs
df <- load_data_seasons(nseason = 1,
nyear = 100,# Set up parameters
Linf = Linf,
maxage = maxage,
tau = tau,
K = K,
t0 = t0,
M= M,
SDR = 0, # Recruitment deviations - set to zero to calculate lambda
fishing.type = 'constant',
mortality = 'constant',
recruitment = recruitment,
negg = codest$parameters[['alpha.lin']],
eggbeta = codest$parameters[['beta.lin']],
F0 = 0, # Set to zero to calc lambda
R0 = R0) # Specify parameters
Fin <- F0
F0
ls.plot <- runScenarios(models = c('linear','hyper'),
recLambda = c('noBOFF','BOFF'),
runLambda = FALSE,
lambda.in = .4,
egg.df = codest,
lambda.slope = lambda.slope,
SDR = SDR,
F0 = Fin)
df.N <- ls.plot[[3]]
df.N$SSB <- df.N$N*df.N$weight*df.N$mat
## Summarise the data frame to  plot it
df.N$old <- NA
pold <- tau
df.N$old[df.N$age < pold] <- 'young'
df.N$old[df.N$age >= pold] <- 'old'
df.Nsum <- df.N %>%
group_by(years, F0, model, old, run) %>%
summarise(N = sum(N),
Catch = sum(Catch),
SSB=  sum(SSB),
Rdev = mean(Rdev)) # The Rdev mean is not a mean (it's the same for all )
df.wSum <- df.N %>%
group_by(years, F0, model, run) %>%
summarise(mWeight = weighted.mean(weight, N),
mAge = weighted.mean(age, N))
df.propOld <- data.frame(propOld = df.Nsum$N[df.Nsum$old == 'young']/df.Nsum$N[df.Nsum$old == 'old'],
SSBprop = df.Nsum$SSB[df.Nsum$old == 'young']/df.Nsum$SSB[df.Nsum$old == 'old'],
years = df.Nsum$years[df.Nsum$old == 'old'],
model = df.Nsum$model[df.Nsum$old == 'old'],
run = df.Nsum$run[df.Nsum$old == 'old'],
meanWeight = df.wSum$mWeight,
meanAge = df.wSum$mAge,
R = ls.plot[[2]]$R,
RR0 = ls.plot[[2]]$R/exp(df$parms$logRinit),
Rtot = ls.plot[[2]]$Rtot
)
median(df.propOld$propOld)
median(df.propOld$SSBprop) # approx 50% with age 6
df.propSum <- df.propOld %>%
group_by( years, model) %>%
summarise(propN = median(propOld),
propSSB = median(SSBprop),
mWeight = median(meanWeight),
mAge = median(meanAge)) %>%
pivot_longer(cols = 3:6)
ggplot(df.propSum[df.propSum$years > 50,], aes(x = years, y= value, color = model))+geom_line()+facet_wrap(~name, scales = 'free_y')
propplot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcor  = cor(SSBprop, RR0),
weightcor  = cor(meanWeight, RR0),
agecor  = cor(meanAge, RR0)) %>% pivot_longer(3:5)
propplot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcor  = cor(SSBprop, Rtot),
weightcor  = cor(meanWeight, Rtot))
propplot
propplot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcor  = cor(SSBprop, RR0),
weightcor  = cor(meanWeight, RR0),
agecor  = cor(meanAge, RR0)) %>% pivot_longer(3:5)
p1 <- ggplot(propplot, aes(x = model, y = value, group = model, fill = model))+geom_violin()+facet_wrap(~name)+theme_bw()+geom_hline(aes(yintercept = 0))+
geom_boxplot(width = 0.2)+theme(legend.position = 'top',
axis.text.x=element_blank())+scale_x_discrete('')+
scale_y_continuous('correlation coefficient (SSB ~ R/R0)')
propplot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcor  = cor(SSBprop, Rtot),
weightcor  = cor(meanWeight, Rtot),
agecor  = cor(meanAge, Rtot)) %>% pivot_longer(3:5)
p2 <- ggplot(propplot, aes(x = model, y = value, group = model, fill = model))+
geom_violin()+
facet_wrap(~name)+
theme_bw()+
geom_hline(aes(yintercept = 0))+
geom_boxplot(width = 0.2)+
theme(legend.position = 'none',axis.text.x = element_text(angle = 50, vjust = .5))+
scale_x_discrete('')+
scale_y_continuous('correlation coefficient (SSB ~ #eggs)')
p1/p2
require('patchwork')
propplot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcor  = cor(SSBprop, RR0),
weightcor  = cor(meanWeight, RR0),
agecor  = cor(meanAge, RR0)) %>% pivot_longer(3:5)
p1 <- ggplot(propplot, aes(x = model, y = value, group = model, fill = model))+geom_violin()+facet_wrap(~name)+theme_bw()+geom_hline(aes(yintercept = 0))+
geom_boxplot(width = 0.2)+theme(legend.position = 'top',
axis.text.x=element_blank())+scale_x_discrete('')+
scale_y_continuous('correlation coefficient (SSB ~ R/R0)')
propplot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcor  = cor(SSBprop, Rtot),
weightcor  = cor(meanWeight, Rtot),
agecor  = cor(meanAge, Rtot)) %>% pivot_longer(3:5)
p2 <- ggplot(propplot, aes(x = model, y = value, group = model, fill = model))+
geom_violin()+
facet_wrap(~name)+
theme_bw()+
geom_hline(aes(yintercept = 0))+
geom_boxplot(width = 0.2)+
theme(legend.position = 'none',axis.text.x = element_text(angle = 50, vjust = .5))+
scale_x_discrete('')+
scale_y_continuous('correlation coefficient (SSB ~ #eggs)')
p1/p2
ls.plot[[2]]
head(ls.plot[[1]])
head(ls.plot[[3]])
dim(ls.plot[[3]])
dim(df.propOld)
head(ls.plot[[2]])
length(ls.plot[[3]]$Rdev[ls.plot[[3]]$age == 0])
df.propOld <- data.frame(propOld = df.Nsum$N[df.Nsum$old == 'young']/df.Nsum$N[df.Nsum$old == 'old'],
SSBprop = df.Nsum$SSB[df.Nsum$old == 'young']/df.Nsum$SSB[df.Nsum$old == 'old'],
years = df.Nsum$years[df.Nsum$old == 'old'],
model = df.Nsum$model[df.Nsum$old == 'old'],
run = df.Nsum$run[df.Nsum$old == 'old'],
meanWeight = df.wSum$mWeight,
meanAge = df.wSum$mAge,
R = ls.plot[[2]]$R,
RR0 = ls.plot[[2]]$R/exp(df$parms$logRinit),
Rtot = ls.plot[[2]]$Rtot,
Rdev = ls.plot[[3]]$Rdev[ls.plot[[3]]$age == 0]
)
head(df.propOld)
head(ls.plot[[3]][ls.plot[[3]]$years == 1,])
head(ls.plot[[3]][ls.plot[[3]]$age == 1,])
ls.plot[[3]]$Rdev[ls.plot[[3]]$age == 0]
head(ls.plot[[]])
head(ls.plot[[2]])
df.propOld <- data.frame(propOld = df.Nsum$N[df.Nsum$old == 'young']/df.Nsum$N[df.Nsum$old == 'old'],
SSBprop = df.Nsum$SSB[df.Nsum$old == 'young']/df.Nsum$SSB[df.Nsum$old == 'old'],
years = df.Nsum$years[df.Nsum$old == 'old'],
model = df.Nsum$model[df.Nsum$old == 'old'],
run = df.Nsum$run[df.Nsum$old == 'old'],
meanWeight = df.wSum$mWeight,
meanAge = df.wSum$mAge,
R = ls.plot[[2]]$R,
RR0 = ls.plot[[2]]$R/exp(df$parms$logRinit),
Rtot = ls.plot[[2]]$Rtot,
Rdev = ls.plot[[3]]$Rdev[ls.plot[[3]]$age == 0]
)
head(df.propOld)
head(ls.plot[[2]])
df.Nsum$run[df.Nsum$old == 'old']
head(df.Nsum)
df.wSum <- df.N %>%
group_by(years, F0, model, run) %>%
summarise(mWeight = weighted.mean(weight, N),
mAge = weighted.mean(age, N)) %>% arrange(run)
df.wSum
head(df.N)
df.Nsum <- df.N %>%
group_by(years, F0, model, old, run) %>%
summarise(N = sum(N),
Catch = sum(Catch),
SSB=  sum(SSB),
Rdev = mean(Rdev)) # The Rdev mean is not a mean (it's the same for all )
df.wSum <- df.N %>%
group_by(years, F0, model, run) %>%
summarise(mWeight = weighted.mean(weight, N),
mAge = weighted.mean(age, N)) %>% arrange(run)
head(df.Nsum)
head(df.wSum)
df.Nsum <- df.N %>%
group_by(years, F0, model, old, run) %>%
summarise(N = sum(N),
Catch = sum(Catch),
SSB=  sum(SSB),
Rdev = mean(Rdev)) # The Rdev mean is not a mean (it's the same for all )
head(df.N)
df.wSum <- df.N %>%
group_by(years, F0, model, old ,run) %>%
summarise(mWeight = weighted.mean(weight, N),
mAge = weighted.mean(age, N)) %>% arrange(run)
dim(df.Nsum)
dim(df.wSum)
head(df.wSum)
head(df.Nsum)
head(df.Nsum[df.Nsum$old == 'young'])
head(df.Nsum[df.Nsum$old == 'young',])
head(df.Nsum[df.Nsum$old == 'young' & df.Nsum$years == 40,])
head(df.Nsum[df.Nsum$old == 'old' & df.Nsum$years == 40,])
df.wSum <- df.N %>%
group_by(years, F0, model, old ,run) %>%
summarise(mWeight = weighted.mean(weight, N),
mAge = weighted.mean(age, N)) %>% arrange(run)
head(df.wSum)
head(df.Nsum)
df.Nsum <- df.N %>%
group_by(years, F0, model, old, run) %>%
summarise(N = sum(N),
Catch = sum(Catch),
SSB=  sum(SSB),
Rdev = mean(Rdev)) %>% arrange(run) # The Rdev mean is not a mean (it's the same for all )
df.wSum <- df.N %>%
group_by(years, F0, model, old ,run) %>%
summarise(mWeight = weighted.mean(weight, N),
mAge = weighted.mean(age, N)) %>% arrange(run)
head(df.wSum)
head(df.Nsum)
head(df.N)
df.wSum <- df.N %>%
group_by(years, F0, model ,run) %>%
summarise(mWeight = weighted.mean(weight, N),
mAge = weighted.mean(age, N)) %>% arrange(run)
dim(df.Nsum)
dim(df.wSum)
head(df.Nsum)
df.Nsum <- df.N %>%
group_by(years, F0, model, old, run) %>%
summarise(N = sum(N),
Catch = sum(Catch),
SSB=  sum(SSB),
Rdev = mean(Rdev)) %>% arrange(run, old) # The Rdev mean is not a mean (it's the same for all )
head(df.Nsum)
df.wSum <- df.N %>%
group_by(years, F0, model ,run) %>%
summarise(mWeight = weighted.mean(weight, N),
mAge = weighted.mean(age, N)) %>% arrange(run)
head(df.wSum)
df.propOld <- data.frame(propOld = df.Nsum$N[df.Nsum$old == 'young']/df.Nsum$N[df.Nsum$old == 'old'],
SSBprop = df.Nsum$SSB[df.Nsum$old == 'young']/df.Nsum$SSB[df.Nsum$old == 'old'],
years = df.Nsum$years[df.Nsum$old == 'old'],
model = df.Nsum$model[df.Nsum$old == 'old'],
run = df.Nsum$run[df.Nsum$old == 'old'],
Rdev = df.Nsum$Rdev[df.Nsum$old == 'old'],
mweight = df.wSum$mWeight,
mage = df.wSum$mAge
)
head(df.propOld)
head(df.propOld, 10)
df.propSum <- df.propOld %>%
group_by( years, model) %>%
summarise(propN = median(propOld),
propSSB = median(SSBprop),
mWeight = median(meanWeight),
mAge = median(meanAge)) %>%
pivot_longer(cols = 3:6)
dim(df.propOld)
head(df.propOld)
head(df.Nsum)
head(df.N)
dim(df.N)
head(ls.save[[2]])
head(ls.plot[[2]])
dim(ls.plot[[2]])
dim(df.propOld)
head(df.wSum)
Rdf <- ls.plot[[2]] %>% arrange(run, years)
head(Rdf)
Rdf <- ls.plot[[2]] %>% arrange(run, years)
df.propOld <- data.frame(propOld = df.Nsum$N[df.Nsum$old == 'young']/df.Nsum$N[df.Nsum$old == 'old'],
SSBprop = df.Nsum$SSB[df.Nsum$old == 'young']/df.Nsum$SSB[df.Nsum$old == 'old'],
years = df.Nsum$years[df.Nsum$old == 'old'],
model = df.Nsum$model[df.Nsum$old == 'old'],
run = df.Nsum$run[df.Nsum$old == 'old'],
Rdev = df.Nsum$Rdev[df.Nsum$old == 'old'],
RR0 =
mweight = df.wSum$mWeight,
mage = df.wSum$mAge,
rec = Rdf$R,
recR0 = Rdf$R/exp(df$parms$logRinit),
rtot = Rdf$Rtot
)
Rdf <- ls.plot[[2]] %>% arrange(run, years)
df.propOld <- data.frame(propOld = df.Nsum$N[df.Nsum$old == 'young']/df.Nsum$N[df.Nsum$old == 'old'],
SSBprop = df.Nsum$SSB[df.Nsum$old == 'young']/df.Nsum$SSB[df.Nsum$old == 'old'],
years = df.Nsum$years[df.Nsum$old == 'old'],
model = df.Nsum$model[df.Nsum$old == 'old'],
run = df.Nsum$run[df.Nsum$old == 'old'],
Rdev = df.Nsum$Rdev[df.Nsum$old == 'old'],
mweight = df.wSum$mWeight,
mage = df.wSum$mAge,
rec = Rdf$R,
recR0 = Rdf$R/exp(df$parms$logRinit),
rtot = Rdf$Rtot
)
head(df.propOld)
head(Rdf)
R.df <- ls.plot[[2]] %>% arrange(run, years)
df.propOld <- data.frame(propOld = df.Nsum$N[df.Nsum$old == 'young']/df.Nsum$N[df.Nsum$old == 'old'],
SSBprop = df.Nsum$SSB[df.Nsum$old == 'young']/df.Nsum$SSB[df.Nsum$old == 'old'],
years = df.Nsum$years[df.Nsum$old == 'old'],
model = df.Nsum$model[df.Nsum$old == 'old'],
run = df.Nsum$run[df.Nsum$old == 'old'],
Rdev = df.Nsum$Rdev[df.Nsum$old == 'old'],
mweight = df.wSum$mWeight,
mage = df.wSum$mAge,
rec = R.df$R,
recR0 = R.df$R/exp(df$parms$logRinit),
rtot = R.df$Rtot
)
head(df.propSum)
head(df.propOld)
df.propOld %>% group_by(model, run) %>% summarise(SSBcorRR0  = cor(SSBprop, recR0),
weightcorRR0  = cor(mweight, recR0),
agecorRR0  = cor(mage, recR0),
SSBcorRtot  = cor(SSBprop, recrtot),
weightcorRtot  = cor(mweight, recrtot),
agecorRtot  = cor(mage, recrtot))
df.propOld %>% group_by(model, run) %>% summarise(SSBcorRR0  = cor(SSBprop, recR0),
weightcorRR0  = cor(mweight, recR0),
agecorRR0  = cor(mage, recR0),
SSBcorRtot  = cor(SSBprop, rtot),
weightcorRtot  = cor(mweight, rtot),
agecorRtot  = cor(mage, rtot))
prop.plot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcorRR0  = cor(SSBprop, recR0),
weightcorRR0  = cor(mweight, recR0),
agecorRR0  = cor(mage, recR0),
SSBcorRtot  = cor(SSBprop, rtot),
weightcorRtot  = cor(mweight, rtot),
agecorRtot  = cor(mage, rtot)) %>%
pivot_longer(3:8)
head(propplot)
prop.plot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcorRR0  = cor(SSBprop, recR0),
weightcorRR0  = cor(mweight, recR0),
agecorRR0  = cor(mage, recR0),
SSBcorRtot  = cor(SSBprop, rtot),
weightcorRtot  = cor(mweight, rtot),
agecorRtot  = cor(mage, rtot)) %>%
pivot_longer(3:8)
head(propplot)
df.propOld %>% group_by(model, run) %>% summarise(SSBcorRR0  = cor(SSBprop, recR0),
weightcorRR0  = cor(mweight, recR0),
agecorRR0  = cor(mage, recR0),
SSBcorRtot  = cor(SSBprop, rtot),
weightcorRtot  = cor(mweight, rtot),
agecorRtot  = cor(mage, rtot))
df.propOld %>% group_by(model, run) %>% summarise(SSBcorRR0  = cor(SSBprop, recR0),
weightcorRR0  = cor(mweight, recR0),
agecorRR0  = cor(mage, recR0),
SSBcorRtot  = cor(SSBprop, rtot),
weightcorRtot  = cor(mweight, rtot),
agecorRtot  = cor(mage, rtot)) %>%
pivot_longer(3:8)
prop.plot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcorRR0  = cor(SSBprop, recR0),
weightcorRR0  = cor(mweight, recR0),
agecorRR0  = cor(mage, recR0),
SSBcorRtot  = cor(SSBprop, rtot),
weightcorRtot  = cor(mweight, rtot),
agecorRtot  = cor(mage, rtot)) %>%
pivot_longer(3:8)
ggplot(prop.plot, aes(x = name, y = value, fill = model))+geom_violin()
ggplot(prop.plot, aes(x = model, y = value, fill = model))+geom_violin()+facet_wrap(~name)
ggplot(prop.plot, aes(x = model, y = value, fill = model))+geom_violin()+facet_wrap(~name, scales = free_y)
ggplot(prop.plot, aes(x = model, y = value, fill = model))+geom_violin()+facet_wrap(~name, scales = 'free_y')
head(ddf.propOld)
head(df.propOld)
prop.plot <- df.propOld %>% group_by(model, run) %>% summarise(SSBcorRR0  = cor(SSBprop, recR0),
weightcorRR0  = cor(mweight, recR0),
agecorRR0  = cor(mage, recR0),
SSBcorRtot  = cor(SSBprop, rtot),
weightcorRtot  = cor(mweight, rtot),
agecorRtot  = cor(mage, rtot),
SSBcorRdev  = cor(SSBprop, Rdev),
weightcorRdev  = cor(mweight, Rdev),
agecorRdev  = cor(mage, Rdev)) %>%
pivot_longer(3:11)
prop.plot
ggplot(prop.plot, aes(x = model, y = value, fill = model))+geom_violin()+facet_wrap(~name, scales = 'free_y')
ggplot(prop.plot, aes(x = model, y = value, fill = model))+geom_violin()+facet_wrap(~name, scales = 'free_y')+scale_x_discrete()+theme(axis.text.x = 'none')
df.export <- data.frame()
ggplot(prop.plot, aes(x = model, y = value, fill = model))+geom_violin()+facet_wrap(~name, scales = 'free_y')+scale_x_discrete()+theme(axis.text.x = 'none')
ggplot(prop.plot, aes(x = model, y = value, fill = model))+geom_violin()+facet_wrap(~name, scales = 'free_y')+scale_x_discrete()+theme(axis.text.x = element_blank())
