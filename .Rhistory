cnames <- as.character(unique(state$cnames))
fnames <- as.character(unique(state$fnames))
state_new <- as.data.frame(matrix(NA, length(cnames), length(names(state))))
names(state_new) <- names(state)
state_new <- state_new[,1:10] # Remove the "fish or not"-flag
state_new$cnames <- cnames
RAMname <- matrix(NA,length(cnames))
for (i in 1:length(cnames)){
tmpidx <- which(cnames[i] == state$cnames)
state_new$F0[i] <- mean(state$F0[tmpidx], na.rm = T)
state_new$Catch[i] <- sum(state$Catch[tmpidx], na.rm = T)
state_new$Landings[i] <- sum(state$Landings[tmpidx], na.rm = T)
state_new$Biomass[i] <- sum(state$Biomass[tmpidx], na.rm = T)
state_new$SSB[i] <- sum(state$SSB[tmpidx], na.rm = T)
state_new$M[i] <-  mean(state$M[tmpidx], na.rm = T)
state_new$Fmsy[i] <-  mean(state$Fmsy[tmpidx], na.rm = T)
state_new$k[i] <-   mean(state$k[tmpidx], na.rm = T)
state_new$t0[i] <- mean(state$t0[tmpidx], na.rm = T)
state_new$wInf[i] <- mean(state$wInf[tmpidx], na.rm = T)
}
# Fix values that are 0 or NaN to NA
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))}
state_new[is.nan.data.frame(state_new)] <- NA
state_new$Biomass[state_new$Biomass == 0] = NA
state_new$SSB[state_new$SSB == 0] = NA
state <- state_new
# Sort the dataframe
state <- state[with(state, order(wInf)), ]
totBioidx <- which(is.na(state$Biomass) == 1)
state$SSBio <- state$SSB
state$totFlag <- as.numeric(is.na(state$SSBio))
state$SSBio[totBioidx] <- state$Biomass[totBioidx]
rmidx <- which(is.na(state$SSBio) == 0)
state$F0[which(is.na(state$F0) == 1)] <- state$Catch[which(is.na(state$F0) == 1)]/
state$SSBio[which(is.na(state$F0) == 1)]
state$wInf[3]<- 15000
source('baseparameters.R')
source('IterateSpectrum.R')
rm(param)
h <- 20
kappaPP <- 5e5
param <- baseparameters(state$wInf, kappa = 5e5, h = h) # Kappa estimated from LME
param$tEnd <- 80
S <- NA
param$F0 <- state$F0
param$fishing <- "Trawl"
ptm <- proc.time()
S <- IterateSpectrum(param,S)
proc.time()-ptm
plotSpectrum(param,S)
plotBiomasstime(param,S)
plotBiomass(param,S)
compareBiomass(param,S,state)
# Plot the results
# Make sure the Rp/Rmax isn't too high
# Calculate species specific values of maximum uptake (h)
h <- 3*state$k/(param$alpha*state$wInf^(-1/3))
h[is.na(h)] <- mean(h,na.rm=T)
cV <- 1/mean(h,na.rm=T)
# hNew
kappaNew <- 694348
5333/6.1
5333*6.1
23700*12
284400+11000*4
24/1200
install.packages('VAST')
install.packages("remotes")
remotes::install_github("James-Thorson/VAST")
install_github("nwfsc-assess/geostatistical_delta-GLMM")
library(devtools)
install_github("nwfsc-assess/geostatistical_delta-GLMM")
install_github("nwfsc-assess/geostatistical_delta-GLMM", force = true)
install_github("nwfsc-assess/geostatistical_delta-GLMM", force = TRUE)
28700*12+(11500*4)/2
setwd("~/GitHub/BOFFsims/R_scripts")
library(reshape2)
library(gtools)
library(patchwork)
library(tidyverse)
library(TMB)
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
source('R/load_data_future.R')
nyear <- 100
nruns <- 100
set.seed(1234)
saving <- TRUE
seeds <- round(runif(n = nruns, min = 1,  max = 1e6))
seeds <- round(runif(n = nruns, min = 1,  max = 1e6))
df.save <- data.frame(years = rep(df$years, nruns),
SSB = NA,
R = NA,
Catch = NA,
run = rep(1:nruns, each = length(df$years)),
model = 'standard')
setwd("~/GitHub/BOFFsims/R_scripts")
setwd("~/GitHub/BOFFsims/")
library(reshape2)
library(gtools)
library(patchwork)
library(tidyverse)
library(TMB)
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
source('R/load_data_future.R')
nyear <- 100
nruns <- 100
set.seed(1234)
saving <- TRUE
seeds <- round(runif(n = nruns, min = 1,  max = 1e6))
seeds <- round(runif(n = nruns, min = 1,  max = 1e6))
df.save <- data.frame(years = rep(df$years, nruns),
SSB = NA,
R = NA,
Catch = NA,
run = rep(1:nruns, each = length(df$years)),
model = 'standard')
# Run MSE from the RAM stocks #
library(reshape2)
library(gtools)
library(patchwork)
library(tidyverse)
library(TMB)
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
source('R/load_data_future.R')
nyear <- 100
nruns <- 100
set.seed(1234)
saving <- TRUE
seeds <- round(runif(n = nruns, min = 1,  max = 1e6))
seeds <- round(runif(n = nruns, min = 1,  max = 1e6))
df.save <- data.frame(years = rep(df$years, nruns),
SSB = NA,
R = NA,
Catch = NA,
run = rep(1:nruns, each = length(df$years)),
model = 'standard')
df <- load_data_seasons(nseason = 4,
nyear = nyear,# Set up parameters
Linf = 30,
maxage = 10,
K = 1,
t0 = 0, SDR = .7,
fishing.type = 'AR',
mortality = 'AR') # Specify parameters
df.save <- data.frame(years = rep(df$years, nruns),
SSB = NA,
R = NA,
Catch = NA,
run = rep(1:nruns, each = length(df$years)),
model = 'standard')
for(i in 1:nruns){
set.seed(seeds[i])
df <- load_data_seasons(nseason = 4,
nyear = nyear,# Set up parameters
Linf = 30,
maxage = 10,
K = 1,
t0 = 0, SDR = .7,
fishing.type = 'AR',
mortality = 'AR') # Specify parameters
tmprun <- run.agebased.true.catch(df, seed = seeds[i])
df.save[df.save$run == i,]$SSB <- tmprun$SSB
df.save[df.save$run == i,]$R <- tmprun$R
df.save[df.save$run == i,]$Catch <- tmprun$Catch
}
df.sum <- df.save %>% group_by(years, model) %>%
summarise(S = mean(SSB),
Rec = mean(R),
C = mean(Catch),
)
df.save.boff <- data.frame(years = rep(df$years, nruns),
SSB = NA,
R = NA,
Catch = NA,
run = rep(1:nruns, each = length(df$years)),
model = 'boff')
for(i in 1:nruns){
set.seed(seeds[i])
df <- load_data_seasons(nseason = 4,
nyear = nyear,# Set up parameters
Linf = 30,
maxage = 10,
K = 1,
t0 = 0, SDR = .7,
fishing.type = 'AR',
mortality = 'AR',
beta = 1.3) # Specify parameters
tmprun <- run.agebased.true.catch(df, seed = seeds[i])
df.save.boff[df.save.boff$run == i,]$SSB <- tmprun$SSB
df.save.boff[df.save.boff$run == i,]$R <- tmprun$R
df.save.boff[df.save.boff$run == i,]$Catch <- tmprun$Catch
}
df.sum.boff <- df.save.boff %>% group_by(years, model) %>%
summarise(S = mean(SSB),
Rec = mean(R),
C = mean(Catch),
)
# Plot boff and not boff
df.plot <- rbind(df.save, df.save.boff)
df.sumplot <- rbind(df.sum, df.sum.boff)
ggplot(df.plot, aes(x= years, y = SSB, group = as.factor(run), color = model))+geom_line(alpha = 0.1, size = .5)+theme_bw()+theme(legend.position = 'none')+
geom_line(data = df.sumplot, aes(y = S, group = NA), size = 2)
ggplot(df.sumplot, aes(x = years, y = S, color = model))+geom_line()+theme_bw()+
geom_hline(aes(yintercept = tmprun$SSB_0))
seed
seed <- 123
# rSums <- function(x){
#   if(df$>)
#
set.seed(seed)
nseason <- df$nseason
df$tEnd <- length(df$years)*nseason
nyear <-df$tEnd/df$nseason #
year <- df$years
tEnd <- nyear*nseason
# True values
F0 <- df$F0
# Set up the data spatially
nspace <- df$nspace
recruitmat <- df$recruitmat
if(df$move == FALSE){
recruitmat <- 1
}
movemat <- df$movemat
move.init <- df$move.init
# M selectivity
Msel <- df$Msel # no difference between males and females
M0 <- df$M0
M <- t(replicate(Msel, n = nyear))
M <- M[1:nyear,]*M0
SDR <- exp(df$logSDR)
b <- rep(1, nyear)
# Survey selectivity
#surv.sel <- getSelec(df$age,df$parms$psel_surv, df$Smin_survey, df$Smax_survey) # Constant over time
surv.sel <- df$sel # Same as fishing selectivity
# Catchability
q <- exp(df$logq) # Constant over time
surv.sd <- exp(df$parms$logSDsurv) # Survey error
# Maturity
Mat.sel <- df$Matsel # Fecundity
h <- exp(df$parms$logh)
# Age
nage <- df$nage
age <- df$age
R0 <- exp(df$parms$logRinit)
Mage <- cumsum(M[1,])#c(0,cumsum(M[1,1:(nage-1)]))
# Calculate N0 based on R0
mage <- nage # Max age
agetmp <- 0:(mage)
nagetmp <- mage*1# SS multiplies this by 3
Mtmp <- rep(NA, nagetmp)
N0 <- rep(NA,nagetmp)
N0[1] <- R0
N0[2:(nagetmp-1)] = R0*exp(-Mage[1:(nagetmp-2)])
N0[nagetmp] =  R0*exp(-Mage[nagetmp-1])/(1-exp(-M[1,nage]))
# N0tmp <- rep(NA,nagetmp)
#
# N0tmp[1] <- R0
# N0tmp[2:(nagetmp-1)] = R0*exp(-M[2:(nagetmp-1)]*age[2:(nagetmp-1)])
# N0tmp[nagetmp] =  R0*exp(-M[nagetmp-1]*age[nagetmp-1])/(1-exp(-M[1,nage]))
#
# N0 <- matrix(NA,nage)
# N0[1:(nage-1)] <- N0tmp[1:(nage-1)]
# N0[nage] <- sum(N0tmp[nage:nagetmp])
#
SSB_0 <- NA
for(i in 1:nspace){
#SSB_0[i] <- sum(df$Matsel*N0*move.init[i])
SSB_0[i] <- sum(N0*move.init[i]*df$wage_ssb[,1]*df$Matsel)
}
names(SSB_0) <- paste(rep('space',each = df$nspace),1:nspace)
R_0 <- R0*move.init
#Ninit[1] <- sum((4*h*R_0*SSB_init/(SSB_0*(1-h)+ SSB_init*(5*h-1)))*exp(-0.5*1*SDR^2+df$parms$Rin[1]), na.rm = T)
year_1 <- c(year,max(year)+1)
SSB <- matrix(NA,nyear, nspace,
dimnames = list(year = df$years,
space = 1:nspace))
SSB.all <- array(NA, dim = c(nyear, nspace,nseason),
dimnames = list(year = year, space = 1:nspace, season = 1:nseason))
SSB.weight <- matrix(NA,nyear, nspace,
dimnames = list(year = year, space = 1:nspace))
SSB.eq <- matrix(NA, nyear, nspace)
Biomass.save <- matrix(NA,nyear, nspace,
dimnames= list(year = year, space = 1:nspace))
Catch <- matrix(NA,nyear, dimnames = list(year = year))
Catch.age <- matrix(NA,nage,nyear, dimnames = list(age = age, year = year))
CatchN <- matrix(NA,nyear, dimnames = list(year = year))
CatchN.age <- matrix(NA,nage,nyear, dimnames = list(age =age, year = year))
R.save <- matrix(NA,nyear, nspace, dimnames = list(year = year, space = 1:nspace))
Fsel.save <- array(NA,dim = c(nage,nyear,nspace), dimnames = list(age = age, year = year, space = 1:nspace))
Fseason.save <- array(NA,dim = c(nage, nyear, nspace,nseason), dimnames = list(age = age, year = year, space = 1:nspace,
season = 1:nseason))
Fout.save <- array(NA, dim = c(nyear,nseason,nspace),
dimnames = list(year = year, season = 1:nseason, space = 1:nspace))
N.save.age <- array(NA,dim = c(nage,nyear+1, nspace, nseason),
dimnames = list(age = age, year = year_1, space = 1:nspace, season = 1:nseason))
N.save.age.mid <- array(NA,dim = c(nage,nyear+1, nspace, nseason),
dimnames = list(age = age, year = year_1, space = 1:nspace, season = 1:nseason))
R.save <- matrix(NA, nyear, nspace)
V.save <- array(NA,dim = c(nyear, nspace, nseason), dimnames = list(
year = year, space = 1:nspace, season = 1:nseason))
Catch.save.age <- array(NA,dim = c(nage,nyear, nspace, nseason),
dimnames = list(age = age, year = year, space = 1:nspace, season = 1:nseason))
CatchN.save.age <- array(NA,dim = c(nage,nyear, nspace, nseason),
dimnames = list(age = age, year = year, space = 1:nspace, season =1:nseason))
Catch.quota <- array(NA, dim = c(nyear, nspace, nseason),
dimnames = list(year = year, space = 1:nspace, season =1:nseason))
Catch.quota.N <- array(0, dim = c(nyear, nspace, nseason), dimnames = list(year = year, space = 1:nspace,
season = 1:nseason))
survey <- array(NA,dim = c(nyear), dimnames = list(year = year))
survey.true <- array(NA, dim = c(nspace, nyear), dimnames = list(space = 1:nspace, year = year))
surv.tot <- matrix(NA, nyear,nspace, dimnames = list(year = year, space = 1:nspace))
age_comps_surv <- array(NA, dim = c(df$age_maxage,nyear), dimnames = list(age = 1:df$age_maxage,
year = year)) #
age_comps_surv_space <- array(NA, dim = c(df$age_maxage,nyear,nspace), dimnames = list(
age = 1:df$age_maxage, year = year))
N.survey <- matrix(NA,df$age_maxage ,nyear, dimnames = list(age = 1:df$age_maxage,
year= year))
age_comps_catch <- array(NA, dim = c(df$age_maxage,nyear), dimnames = list(age = 1:df$age_maxage,
year = year))
age_comps_catch_space <- array(NA, dim = c(df$age_maxage,nyear,nspace), dimnames = list(
age = 1:df$age_maxage, year = year, space = 1:nspace))
age_comps_OM <- array(NA, dim = c(nage,nyear, nspace,nseason),
dimnames = list(age = age, year= year, space = 1:nspace, season = 1:nseason))
Z.save <- array(NA, dim = c(df$nage, nyear,nspace,nseason), dimnames = list(age= age, year = year, space = 1:nspace,
season = 1:nseason))
Z.save[,1,1,1] <- M[1,]
M.save <- array(NA, dim = c(df$nage, nyear,nspace,nseason), dimnames = list(age= age, year = year, space = 1:nspace,
season = 1:nseason))
M.save[,1,1,1] <- M[1,]
Catch.age[,1] <- 0 # Assumed no fishing before data started
Catch[1]<- 0
CatchN[1] <- 0
CatchN.age[,1] <- 0
survey[1] <- 1 # Surveys start later
for (space in 1:nspace){
survey.true[space,1] <- sum(N.save.age[,1,space,df$surveyseason]*surv.sel*q*df$wage_survey[,1])
}
idx.save <- seq(1,tEnd, by = nseason)
# Distribute over space
Ninit <- rep(NA,nage)
names(Ninit) <- age
Ninit_dev <- (df$parms$initN)
# Fishing before model is run
Fpast <- df$Fpast*df$sel
Fage_past <- cumsum(Fpast)
if(all(is.na(Fage_past))){
Fage_past <- rep(0, nage)
}
Ninit[1] <- R0
Ninit[2:(nage-1)] <-R0 * exp(-(Mage[1:(nage-2)]+Fage_past[1:(nage-2)]))*exp(-0.5*SDR^2*0+Ninit_dev[1:(nage-2)])
Ninit[nage] <- R0*exp(-((Mage[nage-1]+Fage_past[nage-1])))/(1-exp(-(M[1,nage]+Fpast[nage])))*exp(-0.5*SDR^2*0+Ninit_dev[nage-1])# Plus group (ignore recruitment dev's in first year )
for (space in 1:nspace){
# if (season == 1){
N.save.age[,1,space,1] <- Ninit*move.init[space] # Just to initialize
N.save.age.mid[,1,space,1] <- N.save.age[,1,space,1]*exp(-0.5*(M[1,]/nseason))
# }else{
#   N.save.age[,1,space,season] <- N.save.age[,1,space,season-1]*exp(-M/nseason)
#   N.save.age.mid[,1,space,season] <- N.save.age[,1,space,season]*exp(-0.5*(M/nseason))
# }
# }
}
#Fspace <- c(0.2612,0.7388) # Contribution of Total catch (add to one)    #Z <- (Fyear+Myear)
Fnseason <- df$Fnseason
if(sum(Fnseason) != 1){
warning('Catch input does not match')
}
pope.mul <- nseason/1*0.5
pope.mul <- 0.50
# Recruitment paramerters
beta <- df$beta
recruitment <- df$recruitment
yr <- 1
w_catch <- df$wage_catch[,yr]
w_surv <- df$wage_survey[,yr]
w_mid <- df$wage_mid[,yr]
w_ssb <- df$wage_ssb[,yr]
Ry <- df$parms$Rin[yr]
# Fyear <- F0[yr]*Fsel
Myear <- M[yr,] # Natural mortality
## add these to load data seasons
# Fnseason <- matrix(1, nseason)
# Fnseason <- Fnseason/sum(Fnseason)
# Fnseason <- c(0,0.5,0.5,0)
if(df$move == FALSE){
Fspace <- 1 # All catches
}
Mseason <- Myear/nseason # M is distributed throughout the year
# fix Ssb and recruitment in all areas
for(space in 1:nspace){
SSB.weight[yr,space] <- sum(N.save.age[,yr,space,1]*as.numeric(w_ssb)^beta*df$Matsel, na.rm = TRUE)
SSB[yr,space] <- SSB.weight[yr,space] #sum(N.save.age[,yr,space,1]*Mat.sel, na.rm = TRUE)
Biomass.save[yr,space] <- sum(N.save.age[,yr,space,1]*as.numeric(w_mid), na.rm = TRUE)
SSB.all[1,space,1]<- sum(N.save.age[,1,space,1]*Mat.sel, na.rm = TRUE)
# Calculate the unfished spawning biomass given the annual life history params
Mage <- cumsum(Myear)#c(0,cumsum(M[1,1:(nage-1)]))
# Calculate N0 based on R0
N0.eq <- rep(NA,nagetmp)
N0.eq[1] <- R0
N0.eq[2:(nagetmp-1)] = R0*exp(-Mage[1:(nagetmp-2)])
N0.eq[nagetmp] =  R0*exp(-Mage[nagetmp-1])/(1-exp(-Myear[nage]))
SSB.eq[yr, space] <- sum(N0.eq*as.numeric(w_ssb)*df$Matsel)
# Recruitment only in season 1
if(recruitment == 'BH'){
R <- (4*h*R_0[space]*SSB[yr,space]/
(SSB_0[space]*(1-h)+ SSB[yr,space]*(5*h-1)))*exp(-0.5*df$b[yr]*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,yr,space,1] <- R
R.save[yr,space] <- R
}
if(recruitment == 'Ricker'){
R <- alpha * SSB[yr, space] * exp(-alpha * (SSB[yr, space]/R0))*exp(-0.5*df$b[yr]*SDR^2+Ry)#
N.save.age[1,yr,space,1] <- R
R.save[yr,space] <- R
}
}
season <-
season <- 1
space <- 1
#p.save[yr] <- sum(pseltmp)
#
Fsel <- df$sel
Fsel.save[,yr,space] <- Fsel
if(nspace > 1){
if(df$years[yr]<= 2018){
Catch_space <- df$Catch.country[yr,space]
}else{
Catch_space <- df$Catch[yr]*Fspace[space]
}
}else{
Catch_space <- df$Catch[yr]
}
B.tmp <-  sum(N.save.age[,yr,space,season]*exp(-Mseason*pope.mul)*w_catch*Fsel) # Get biomass from previous year
N.tmp <- N.save.age[,yr,space,season]#
V.save[yr,space,season] <- B.tmp
if(df$catch.true == TRUE){
E.temp <- Catch_space*Fnseason[season,space]#*Fspace[space] # Catch distribution in the year
Catch.quota[yr,space,season] <- E.temp
if(E.temp/B.tmp >= .95){
warning(paste('Catch exceeds available biomass in year:',year[yr],' and season', season, 'area', space)) # Stop if in the past
#print(paste('Catch exceeds available biomass in year:',year,' and season', season, 'area', space))
E.temp <- 0.80*B.tmp
Catch.quota.N[yr,space,season] <- 1
#if(df$years[yr] > 2026){
#stop('danger')
#  }
}
Fout <- getF(E.temp,B.tmp,Mseason = Mseason, Fsel = Fsel, N.tmp = N.tmp, w_catch = w_catch,
method = 'Hybrid')
if(E.temp>0){
Fseason <- Fout*Fsel
Fnew <- Fout
Z <- Fnew*Fsel+Mseason
Fseason <- Fnew*Fsel
}else{
Fseason <- 0
}
}else{
Fout = df$F0[yr]/nseason
Fnew <- Fout
Z <- Fnew*Fsel+Mseason
Fseason <- Fnew*Fsel
}
Fout.save[yr,season,space] <- Fout # terminal fishing mortality
Fseason.save[,yr,space,season] <- Fseason
Z <- Mseason+Fseason
Z.save[,yr,space,season]<- Z
M.save[,yr,space,season] <- Mseason
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if(df$move == FALSE){
spaceidx <- 1
}
if(season <nseason){
N.save.age[,yr,space,season+1] <- N.save.age[,yr,space,season]*exp(-Z)-
N.save.age[, yr,space,season]*exp(-Z)*(movemat[space,,season,yr])+ # Remove the ones that leave
N.save.age[, yr,spaceidx,season]*exp(-Z)*(movemat[spaceidx,,season,yr])# add the ones come to the surrounding areas
age_comps_OM[,yr,space,season] <- N.save.age[, yr,space,season]/sum(N.save.age[, yr,space,season])
SSB.all[yr,space,season]<- sum(N.save.age[,yr,space,season]*Mat.sel, na.rm = T)
Catch.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]*w_catch
CatchN.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]
}else{
N.save.age[2:(nage-1),yr+1,space,1] <- N.save.age[1:(nage-2),yr,space,season]*exp(-Z[1:(nage-2)])-
N.save.age[1:(nage-2), yr,space,season]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season,yr])+ # Remove the ones that leave
N.save.age[1:(nage-2), yr,spaceidx,season]*exp(-Z[1:(nage-2)])*(movemat[spaceidx,1:(nage-2),season,yr])# add the ones come to the surrounding areas
# Plus group
Nsurvive.plus <- (N.save.age[nage-1, yr,space, nseason]*exp(-Z[nage-1])+
N.save.age[nage, yr,space, nseason]*exp(-Z[nage]))
Nout.plus <- Nsurvive.plus*(movemat[space,nage, season,yr]) # Leaving
Nin.plus <- (N.save.age[nage-1, yr,spaceidx,nseason]*exp(-Z[nage-1])+
N.save.age[nage, yr,spaceidx,nseason]*exp(-Z[nage]))*
(movemat[spaceidx,nage, season,yr]) # Incoming
N.save.age[nage,yr+1,space,1] <- Nsurvive.plus- Nout.plus + Nin.plus
age_comps_OM[,yr,space,season] <- N.save.age[, yr,space,season]/sum(N.save.age[, yr,space,season])
SSB.all[yr,space,season]<- sum(N.save.age[,yr,space,season]*Mat.sel, na.rm = T)
Catch.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]*w_catch
CatchN.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]
}
R
