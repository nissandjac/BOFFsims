fit1 <- lm(log(gsi)~ log(weight))
idx <- weight > 0.25*max(weight)
fit2 <- lm(log(fecundity[idx]) ~ log(weight[idx]))
plot(weight[idx],fecundity[idx], log = 'xy')
lines(weight[idx],exp(fit2$coefficients[1])*weight[idx]^fit2$coefficients[2])
par(mfrow = c(1,1), mar = c(4,4,1,1))
plot(weight, gsi*weight, log="", xlab="Weight (g)", xlim=c(0,10000), ylim=c(0,100))
lines(weight, exp(fit1$coefficients[1]) * weight^(1+fit1$coefficients[2]), col="red", lwd=4)
lines(x, exp(fit1$coefficients[1])*x, col="blue", lty=2)
getwd()
setwd("~/Github/BOFFsims/R")
setwd("~/Github/BOFFsims/")
df <- read.csv('data/fecundityEggSizeFemaleSize.csv')
head(df)
names(df)
ggplot(df, aes(x = FemaleMass_g, y = Fecundity_nOfEggs_per_female))+geom_point()
ggplot(df, aes(x = FemaleMass_g, y = Fecundity_nOfEggs_per_female))+geom_point()+scale_y_log10()
ggplot(df, aes(x = FemaleMass_g, y = Fecundity_nOfEggs_per_female, color = Species))+geom_point()+scale_y_log10()+scale_x_log10()
ggplot(df, aes(x = FemaleMass_g, y = Fecundity_nOfEggs_per_female, color = Species))+geom_point()+scale_y_log10()+scale_x_log10()+theme(legend.position = 'none')
head(df)
df$Fecundity_nOfEggs_per_female
df$FemaleMass_g
df$FemaleSize_mm
head(df)
grep('sprattus', df$Species)
grep('Sprattus', df$Species)
unique(df$Species)
head(df)
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_log10()+scale_x_log10()+theme(legend.position = 'none')
ggplot(df, aes(x = .1*FemaleSize_mm^3, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_log10()+scale_x_log10()+theme(legend.position = 'none')
ggplot(df, aes(x = .1*FemaleSize_mm^3, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+theme(legend.position = 'none')
ggplot(df, aes(x = .1*FemaleSize_mm^3, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+theme(legend.position = 'none')+
geom_smooth()
ggplot(df, aes(x = .01*FemaleSize_mm^3, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+theme(legend.position = 'none')+
geom_smooth()
ggplot(df, aes(x = .01*FemaleSize_mm^3, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+theme(legend.position = 'none')+
geom_smooth(method = 'lm', aes(group = Species))
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+theme(legend.position = 'none')+
geom_smooth(method = 'lm', aes(group = Species))
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+theme(legend.position = 'none')+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw()
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw(legend.position = 'none')
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw()+theme(legend.position = 'none')
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_log10()+scale_x_log10()+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw()+theme(legend.position = 'none')
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_log10()+scale_x_log10()+facet_wrap(~Species)+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw()+theme(legend.position = 'none')
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_log10()+scale_x_log10()+facet_wrap(~Species, scales = 'free')+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw()+theme(legend.position = 'none')
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+facet_wrap(~Species, scales = 'free')+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw()+theme(legend.position = 'none')
head(df)
exp(7.02)
nseason <- df$nseason
df$tEnd <- length(df$years)*nseason
nyear <-df$tEnd/df$nseason #
year <- df$years
tEnd <- nyear*nseason
# True values
F0 <- df$F0
# Set up the data spatially
nspace <- df$nspace
recruitmat <- df$recruitmat
if(df$move == FALSE){
recruitmat <- 1
}
movemat <- df$movemat
move.init <- df$move.init
# M selectivity
Msel <- df$Msel # no difference between males and females
M0 <- df$M0
M <- t(replicate(Msel, n = nyear))
M <- M[1:nyear,]*M0
SDR <- exp(df$logSDR)
b <- rep(1, nyear)
# Survey selectivity
#surv.sel <- getSelec(df$age,df$parms$psel_surv, df$Smin_survey, df$Smax_survey) # Constant over time
surv.sel <- df$sel # Same as fishing selectivity
# Catchability
q <- exp(df$logq) # Constant over time
surv.sd <- exp(df$parms$logSDsurv) # Survey error
# Maturity
Mat.sel <- df$Matsel # Fecundity
h <- exp(df$parms$logh)
# Age
nage <- df$nage
age <- df$age
R0 <- exp(df$parms$logRinit)
Mage <- cumsum(M[1,])#c(0,cumsum(M[1,1:(nage-1)]))
# Calculate N0 based on R0
mage <- nage # Max age
agetmp <- 0:(mage)
nagetmp <- mage*1# SS multiplies this by 3
Mtmp <- rep(NA, nagetmp)
N0 <- rep(NA,nagetmp)
N0[1] <- R0
N0[2:(nagetmp-1)] = R0*exp(-Mage[1:(nagetmp-2)])
N0[nagetmp] =  R0*exp(-Mage[nagetmp-1])/(1-exp(-M[1,nage]))
# Mtmp[1:nage] <- cumsum(M[1,])
# Mtmp[nage+1:nagetmp] <- cumsum(M[1,])[nage]
#
# N0tmp <- rep(NA,nagetmp)
#
# N0tmp[1] <- R0
# N0tmp[2:(nagetmp-1)] = R0*exp(-M[2:(nagetmp-1)]*age[2:(nagetmp-1)])
# N0tmp[nagetmp] =  R0*exp(-M[nagetmp-1]*age[nagetmp-1])/(1-exp(-M[1,nage]))
#
# N0 <- matrix(NA,nage)
# N0[1:(nage-1)] <- N0tmp[1:(nage-1)]
# N0[nage] <- sum(N0tmp[nage:nagetmp])
#
SSB_0 <- NA
for(i in 1:nspace){
#SSB_0[i] <- sum(df$Matsel*N0*move.init[i])
SSB_0[i] <- sum(N0*move.init[i]*df$wage_ssb[,1]*df$Matsel)
}
names(SSB_0) <- paste(rep('space',each = df$nspace),1:nspace)
R_0 <- R0*move.init
# Used the inital recruitment devs to get a start
# Ninit <- rep(NA,nage)
# Ninit_dev <- (df$parms$initN)
# Ninit[1] <- R0
# Ninit[2:(nage-1)] <-R0 * exp(-M[2:(nage-1)]*age[2:(nage-1)])*exp(-0.5*SDR^2*0+Ninit_dev[1:(nage-2)])
# Ninit[nage] <- R0*exp(-(M[nage-1]*age[nage-1]))/(1-exp(-M[nage]))*exp(-0.5*SDR^2*0+Ninit_dev[nage-1])# Plus group (ignore recruitment dev's in first year )
#
# Create containers to save the data
# SSB_init <- NA
#
# for(i in 1:nspace)
#
#Ninit[1] <- sum((4*h*R_0*SSB_init/(SSB_0*(1-h)+ SSB_init*(5*h-1)))*exp(-0.5*1*SDR^2+df$parms$Rin[1]), na.rm = T)
year_1 <- c(year,max(year)+1)
SSB <- matrix(NA,nyear, nspace,
dimnames = list(year = df$years,
space = 1:nspace))
SSB.all <- array(NA, dim = c(nyear, nspace,nseason),
dimnames = list(year = year, space = 1:nspace, season = 1:nseason))
SSB.weight <- matrix(NA,nyear, nspace,
dimnames = list(year = year, space = 1:nspace))
SSB.eq <- matrix(NA, nyear, nspace)
Biomass.save <- matrix(NA,nyear, nspace,
dimnames= list(year = year, space = 1:nspace))
Catch <- matrix(NA,nyear, dimnames = list(year = year))
Catch.age <- matrix(NA,nage,nyear, dimnames = list(age = age, year = year))
CatchN <- matrix(NA,nyear, dimnames = list(year = year))
CatchN.age <- matrix(NA,nage,nyear, dimnames = list(age =age, year = year))
R.save <- matrix(NA,nyear, nspace, dimnames = list(year = year, space = 1:nspace))
Fsel.save <- array(NA,dim = c(nage,nyear,nspace), dimnames = list(age = age, year = year, space = 1:nspace))
Fseason.save <- array(NA,dim = c(nage, nyear, nspace,nseason), dimnames = list(age = age, year = year, space = 1:nspace,
season = 1:nseason))
Fout.save <- array(NA, dim = c(nyear,nseason,nspace),
dimnames = list(year = year, season = 1:nseason, space = 1:nspace))
N.save.age <- array(NA,dim = c(nage,nyear+1, nspace, nseason),
dimnames = list(age = age, year = year_1, space = 1:nspace, season = 1:nseason))
N.save.age.mid <- array(NA,dim = c(nage,nyear+1, nspace, nseason),
dimnames = list(age = age, year = year_1, space = 1:nspace, season = 1:nseason))
R.save <- matrix(NA, nyear, nspace)
V.save <- array(NA,dim = c(nyear, nspace, nseason), dimnames = list(
year = year, space = 1:nspace, season = 1:nseason))
Catch.save.age <- array(NA,dim = c(nage,nyear, nspace, nseason),
dimnames = list(age = age, year = year, space = 1:nspace, season = 1:nseason))
CatchN.save.age <- array(NA,dim = c(nage,nyear, nspace, nseason),
dimnames = list(age = age, year = year, space = 1:nspace, season =1:nseason))
Catch.quota <- array(NA, dim = c(nyear, nspace, nseason),
dimnames = list(year = year, space = 1:nspace, season =1:nseason))
Catch.quota.N <- array(0, dim = c(nyear, nspace, nseason), dimnames = list(year = year, space = 1:nspace,
season = 1:nseason))
survey <- array(NA,dim = c(nyear), dimnames = list(year = year))
survey.true <- array(NA, dim = c(nspace, nyear), dimnames = list(space = 1:nspace, year = year))
surv.tot <- matrix(NA, nyear,nspace, dimnames = list(year = year, space = 1:nspace))
age_comps_surv <- array(NA, dim = c(df$age_maxage,nyear), dimnames = list(age = 1:df$age_maxage,
year = year)) #
age_comps_surv_space <- array(NA, dim = c(df$age_maxage,nyear,nspace), dimnames = list(
age = 1:df$age_maxage, year = year))
N.survey <- matrix(NA,df$age_maxage ,nyear, dimnames = list(age = 1:df$age_maxage,
year= year))
age_comps_catch <- array(NA, dim = c(df$age_maxage,nyear), dimnames = list(age = 1:df$age_maxage,
year = year))
age_comps_catch_space <- array(NA, dim = c(df$age_maxage,nyear,nspace), dimnames = list(
age = 1:df$age_maxage, year = year, space = 1:nspace))
age_comps_OM <- array(NA, dim = c(nage,nyear, nspace,nseason),
dimnames = list(age = age, year= year, space = 1:nspace, season = 1:nseason))
Z.save <- array(NA, dim = c(df$nage, nyear,nspace,nseason), dimnames = list(age= age, year = year, space = 1:nspace,
season = 1:nseason))
Z.save[,1,1,1] <- M[1,]
M.save <- array(NA, dim = c(df$nage, nyear,nspace,nseason), dimnames = list(age= age, year = year, space = 1:nspace,
season = 1:nseason))
M.save[,1,1,1] <- M[1,]
Catch.age[,1] <- 0 # Assumed no fishing before data started
Catch[1]<- 0
CatchN[1] <- 0
CatchN.age[,1] <- 0
survey[1] <- 1 # Surveys start later
for (space in 1:nspace){
survey.true[space,1] <- sum(N.save.age[,1,space,df$surveyseason]*surv.sel*q*df$wage_survey[,1])
}
idx.save <- seq(1,tEnd, by = nseason)
# Distribute over space
Ninit <- rep(NA,nage)
names(Ninit) <- age
Ninit_dev <- (df$parms$initN)
# Fishing before model is run
Fpast <- df$Fpast*df$sel
Fage_past <- cumsum(Fpast)
if(all(is.na(Fage_past))){
Fage_past <- rep(0, nage)
}
Ninit[1] <- R0
Ninit[2:(nage-1)] <-R0 * exp(-(Mage[1:(nage-2)]+Fage_past[1:(nage-2)]))*exp(-0.5*SDR^2*0+Ninit_dev[1:(nage-2)])
Ninit[nage] <- R0*exp(-((Mage[nage-1]+Fage_past[nage-1])))/(1-exp(-(M[1,nage]+Fpast[nage])))*exp(-0.5*SDR^2*0+Ninit_dev[nage-1])# Plus group (ignore recruitment dev's in first year )
#p.save <-matrix(NA,tEnd)
for (space in 1:nspace){
# if (season == 1){
N.save.age[,1,space,1] <- Ninit*move.init[space] # Just to initialize
N.save.age.mid[,1,space,1] <- N.save.age[,1,space,1]*exp(-0.5*(M[1,]/nseason))
# }else{
#   N.save.age[,1,space,season] <- N.save.age[,1,space,season-1]*exp(-M/nseason)
#   N.save.age.mid[,1,space,season] <- N.save.age[,1,space,season]*exp(-0.5*(M/nseason))
# }
# }
}
#Fspace <- c(0.2612,0.7388) # Contribution of Total catch (add to one)    #Z <- (Fyear+Myear)
Fnseason <- df$Fnseason
if(sum(Fnseason) != 1){
warning('Catch input does not match')
}
pope.mul <- nseason/1*0.5
pope.mul <- 0.50
# Recruitment paramerters
beta <- df$beta
recruitment <- df$recruitment
library(reshape2)
library(gtools)
library(patchwork)
library(tidyverse)
library(TMB)
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
source('R/load_data_future.R')
nyear <- 100
nruns <- 100
set.seed(1234)
saving <- TRUE
seeds <- round(runif(n = nruns, min = 1,  max = 1e6))
df <- load_data_seasons(nseason = 4,
nyear = nyear,# Set up parameters
Linf = 30,
maxage = 10,
K = 1,
t0 = 0, SDR = .7,
fishing.type = 'AR',
mortality = 'AR') # Specify parameters
df.save <- data.frame(years = rep(df$years, nruns),
SSB = NA,
R = NA,
Catch = NA,
run = rep(1:nruns, each = length(df$years)),
model = 'standard')
dat <- read.csv("Fecundity.csv", header=TRUE)
ix = (dat$Species=="Gadus morhua" & dat$Location=="Coastal Iceland")
setwd("C:/Users/nsja/Dropbox/Barnache comment")
dat <- read.csv("Fecundity.csv", header=TRUE)
ix = (dat$Species=="Gadus morhua" & dat$Location=="Coastal Iceland")
K = 0.12  # Roughly fitted to the reported growth in Marteinsdottir
Winf = 25000
Z = 0.2 # NAtural mortality
F = 0.0  # <<--- change fishing mortality here
amature = 6 # Should be 6.6, but I'm using discrete ages.
#
# Maturity and weight
#
age = seq(1,60)
psi = 0.5*(1+tanh(0.5*(age-amature)))  # maturity ogive0.5
w = Winf * (1-exp(-K*age))^3
wmature = w[amature]
w_fit_gsi = 0*wmature
#
# Fit model
#
weight = 0.0071*(dat$FemaleSize_mm[ix]/10)^3.08
gsi = dat$Fecundity_nOfEggs_per_female[ix]/weight
fit = lm(log(gsi) ~ log(weight))
gsieff = psi*exp(fit$coefficients[1])*w^fit$coefficients[2]
#
# Make gsi-model
#
mort = Z*rep(1,length(age)) + psi*F  # mortality consists of Z on all ages and F on mature
surv = exp(-mort*age) # survival
meangsi = mean(gsi[weight>w_fit_gsi])
meangsieff = psi*meangsi
#
# Plot of data and fits
#
par(mfrow=c(2,1), mar=c(4,5,1,2))
plot(weight, gsi, xlab="Weight (g)", ylab="Fecundity/weight\n(eggs/g)", ylim=c(0,1200), xlim=c(0,Winf))
#lines(w, gsieff, col="red", lty=2)
lines(w, gsieff/psi, col="red", lwd=2)
#lines(w, meangsieff, col="blue", lty=2)
lines(w, meangsieff/psi, col="blue", lwd=2)
lines(wmature*c(1,1), c(0,1200), lty=2, lwd=2)
#
# Plot of reproductive output
#
plot(age, surv*w*meangsieff, col="blue", lwd=2, type="l",
xlab="Age", ylab="Population reproductive\n output (eggs/batch/individual)",
ylim=c(0,1e6), xlim=c(0,30))
lines(age, surv*w*gsieff, col="red", lwd=2)
R1 = sum(surv*w*gsieff)
cat("Relative difference btw methods:", R1/R2-1,"\n")
cat("Relative change in mean weight with and without fishing: ",
(sum(psi*exp(-Z*age)*w) / sum(psi*exp(-Z*age))) /
(sum(psi*surv*w) / sum(psi*surv)),"\n")
# ggplot!
df.weight <- data.frame(weight = weight, gsi = gsi)
df.pred <- data.frame(weight = w,gsieff = gsieff/psi, mgsi = meangsieff/psi)
df.age <- data.frame(age = age,
gsi = surv*w*meangsieff,
gsi.hyper =surv*w*gsieff)
library(ggplot2)
library(scales)
library(gridExtra)
library(gtable)
library(grid)
p1 <- ggplot(df.weight, aes(x = weight/1000, y = gsi))+geom_point(color = alpha('black', 0.5))+
theme_classic()+scale_y_continuous(name = 'Fecundity/weight\n(eggs/g)')+scale_x_continuous('Weight (kg)')+
geom_line(data = df.pred, aes(y = gsieff), col = 'red', size = 1.5)+
geom_line(data = df.pred, aes(y = mgsi), col = 'blue', size = 1.5)+
geom_vline(xintercept = amature, col = 'black', linetype = 2, size= 1)
plot(weight, gsi, xlab="Weight (g)", ylab="Fecundity/weight\n(eggs/g)", ylim=c(0,1200), xlim=c(0,Winf))
#lines(w, gsieff, col="red", lty=2)
lines(w, gsieff/psi, col="red", lwd=2)
#lines(w, meangsieff, col="blue", lty=2)
lines(w, meangsieff/psi, col="blue", lwd=2)
lines(wmature*c(1,1), c(0,1200), lty=2, lwd=2)
#
# Plot of reproductive output
#
plot(age, surv*w*meangsieff, col="blue", lwd=2, type="l",
xlab="Age", ylab="Population reproductive\n output (eggs/batch/individual)",
ylim=c(0,1e6), xlim=c(0,30))
lines(age, surv*w*gsieff, col="red", lwd=2)
lines(amature*c(1,1), c(0,2000000), lty=2, lwd=2)
R1 = sum(surv*w*gsieff)
R2 = sum(surv*w*meangsieff)
cat("Relative difference btw methods:", R1/R2-1,"\n")
cat("Relative change in mean weight with and without fishing: ",
(sum(psi*exp(-Z*age)*w) / sum(psi*exp(-Z*age))) /
(sum(psi*surv*w) / sum(psi*surv)),"\n")
cod <- df[df$Species=="Gadus morhua" & df$Location=="Coastal Iceland",]
df <- read.csv('data/fecundityEggSizeFemaleSize.csv')
getwd()
setwd("~/Github/BOFFsims/R_scripts")
setwd("~/Github/BOFFsims/")
df <- read.csv('data/fecundityEggSizeFemaleSize.csv')
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+facet_wrap(~Species, scales = 'free')+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw()+theme(legend.position = 'none')
cod <- df[df$Species=="Gadus morhua" & df$Location=="Coastal Iceland",]
head(cod)
ggplot(cod, aes(x = Fecundity_nOfEggs_per_female, x= FemaleSize_mm))+geom_point()
ggplot(cod, aes(y = Fecundity_nOfEggs_per_female, x= FemaleSize_mm))+geom_point()
?optim
compile("src/fits.cpp")
compile("src/fits.cpp")
compile("src/fits.cpp")
compile("src/fits.cpp")
compile("src/fits.cpp")
compile("src/fits.cpp")
compile("src/fits.cpp")
compile("src/fits.cpp")
compile("src/fits.cpp")
compile("src/fits.cpp")
dyn.load(dynlib("src/fits"))
df <- read.csv('data/fecundityEggSizeFemaleSize.csv')
ggplot(df, aes(x = FemaleSize_mm, y = Fecundity_nOfEggs_per_female, color = Species))+
geom_point()+scale_y_continuous()+scale_x_log10()+facet_wrap(~Species, scales = 'free')+
geom_smooth(method = 'lm', aes(group = Species))+theme_bw()+theme(legend.position = 'none')
cod <- df[df$Species=="Gadus morhua" & df$Location=="Coastal Iceland",]
cod$FemaleMass_g
cod$FemaleSize_mm
cod$FemaleSize_mm*.1
head(cod)
df.tmb <- list(
w = .01*cod$FemaleSize_mm*.1^3,
fecundity = cod$Fecundity_nOfEggs_per_female
)
df.tmb
df.tmb <- list(
w = .1*.01*cod$FemaleSize_mm^3,
fecundity = cod$Fecundity_nOfEggs_per_female
)
df.tmb
(.1*.01*cod$FemaleSize_mm)^3
.01*(.1*cod$FemaleSize_mm)^3
df.tmb <- list(
w = .01*(.1*cod$FemaleSize_mm)^3,
fecundity = cod$Fecundity_nOfEggs_per_female
)
df.tmb <- list(
w = (.01*(.1*cod$FemaleSize_mm)^3)/1000,
fecundity = cod$Fecundity_nOfEggs_per_female
)
df.tmb
parms <- list(lalpha = .2)
compile("src/fits.cpp")
compile("src/fits.cpp")
obj <-MakeADFun(df.tmb,parms,DLL="fits")
df.tmb <- list(
w = (.01*(.1*cod$FemaleSize_mm)^3)/1000,
fecundity = cod$Fecundity_nOfEggs_per_female,
nobs = length(cod$Fecundity_nOfEggs_per_female)
)
parms <- list(lalpha = .2)
compile("src/fits.cpp")
dyn.load(dynlib("src/fits"))
obj <-MakeADFun(df.tmb,parms,DLL="fits")
dyn.unload(dynlib("src/fits"))
compile("src/fits.cpp")
dyn.load(dynlib("src/fits"))
obj <-MakeADFun(df.tmb,parms,DLL="fits")
obj$par
obj$report()
compile("src/fits.cpp")
dyn.load(dynlib("src/fits"))
obj <-MakeADFun(df.tmb,parms,DLL="fits")
lower <- obj$par-Inf
upper <- obj$par+Inf
system.time(opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,
control = list(iter.max = 1e6,
eval.max = 1e6))) #
opt$par
opt
compile("src/fits.cpp")
dyn.unload(dynlib("src/fits"))
compile("src/fits.cpp")
dyn.load(dynlib("src/fits"))
obj <-MakeADFun(df.tmb,parms,DLL="fits")
lower <- obj$par-Inf
upper <- obj$par+Inf
system.time(opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,
control = list(iter.max = 1e6,
eval.max = 1e6))) #
opt
obj$report()
plot(df.tmb$w,df.tmb$fecundity)
lines(df.tmb$w, obj$report()$fits)
plot(df.tmb$w,df.tmb$fecundity, xlim = c(0,30))
lines(df.tmb$w, obj$report()$fits)
parms <- list(lalpha = 60)
compile("src/fits.cpp")
dyn.load(dynlib("src/fits"))
obj <-MakeADFun(df.tmb,parms,DLL="fits")
plot(df.tmb$w,df.tmb$fecundity, xlim = c(0,30))
obj$report()$fits
plot(df.tmb$w,df.tmb$fecundity, xlim = c(0,30))
lines(df.tmb$w, df.tmb$w*10)
df.tmb$w*10
df.tmb$fecundity
plot(df.tmb$w,df.tmb$fecundity/1e6, xlim = c(0,30))
df.tmb$fecundity/1e6
df.tmb$w*10
plot(df.tmb$w,df.tmb$fecundity/1e6, xlim = c(0,30))
points(df.tmb$w, df.tmb$w*1)
lines(df.tmb$w, df.tmb$w*1)
lower <- obj$par-Inf
upper <- obj$par+Inf
system.time(opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,
control = list(iter.max = 1e6,
eval.max = 1e6))) #
opt
dyn.unload(dynlib("src/fits"))
compile("src/fits.cpp")
dyn.load(dynlib("src/fits"))
obj <-MakeADFun(df.tmb,parms,DLL="fits")
plot(df.tmb$w,df.tmb$fecundity/1e6, xlim = c(0,30))
lower <- obj$par-Inf
upper <- obj$par+Inf
system.time(opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,
control = list(iter.max = 1e6,
eval.max = 1e6))) #
opt
system.time(rep<-sdreport(obj))
rep
sdrep <- summary(rep)
rep.values<-rownames(sdrep)
rep.values
sdrep
df <- data.frame(value = sdrep[rep.values == 'fits',1])
fits <- data.frame(value = sdrep[rep.values == 'fits',1])
fits
plot(df.tmb$w,fits$value)
points(df.tmb$w, df.tmb$fecundity)
dev.off()
plot(df.tmb$w,fits$value, type= 'l')
points(df.tmb$w, df.tmb$fecundity)
